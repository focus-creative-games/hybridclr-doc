"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3920],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,c=d["".concat(l,".").concat(m)]||d[m]||h[m]||o;return n?a.createElement(c,r(r({ref:t},u),{},{components:n})):a.createElement(c,r({ref:t},u))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,r[1]=s;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8875:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const o={},r="MetaVersion Workflow",s={unversionedId:"business/ultimate/metaversionworkflow",id:"version-7.8.1/business/ultimate/metaversionworkflow",title:"MetaVersion Workflow",description:"DHE hot updates previously utilized two workflows:",source:"@site/i18n/en/docusaurus-plugin-content-docs/version-7.8.1/business/ultimate/metaversionworkflow.md",sourceDirName:"business/ultimate",slug:"/business/ultimate/metaversionworkflow",permalink:"/en/docs/7.8.1/business/ultimate/metaversionworkflow",draft:!1,tags:[],version:"7.8.1",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Loading Hot-Update Assemblies",permalink:"/en/docs/7.8.1/business/ultimate/loadassembly"},next:{title:"DHAO Workflow",permalink:"/en/docs/7.8.1/business/ultimate/dhaoworkflow"}},l={},p=[{value:"Principle",id:"principle",level:2},{value:"Basic Concepts",id:"basic-concepts",level:2},{value:"Snapshot",id:"snapshot",level:3},{value:"Inject Rule Files",id:"inject-rule-files",level:3},{value:"manifest.json",id:"manifestjson",level:3},{value:"Meta Version Files",id:"meta-version-files",level:3},{value:"Meta Spec Files",id:"meta-spec-files",level:3},{value:"signature-mapper.json",id:"signature-mapperjson",level:3},{value:"Build and Hot Update Workflow",id:"build-and-hot-update-workflow",level:2},{value:"AOT Snapshot",id:"aot-snapshot",level:2},{value:"Creating an AOT Snapshot",id:"creating-an-aot-snapshot",level:3},{value:"Creating the Base AOT Snapshot File",id:"creating-the-base-aot-snapshot-file",level:4},{value:"Generating Meta Version Files for DHE DLLs in the Base AOT Snapshot",id:"generating-meta-version-files-for-dhe-dlls-in-the-base-aot-snapshot",level:4},{value:"Multi-Platform Considerations",id:"multi-platform-considerations",level:4},{value:"Version Control",id:"version-control",level:4},{value:"HotUpdate Snapshot",id:"hotupdate-snapshot",level:2},{value:"Creating a HotUpdate Snapshot",id:"creating-a-hotupdate-snapshot",level:3}],u={toc:p},d="wrapper";function h(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"metaversion-workflow"},"MetaVersion Workflow"),(0,i.kt)("p",null,"DHE hot updates previously utilized two workflows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"DHAO Workflow"),(0,i.kt)("li",{parentName:"ul"},"MetaVersion Workflow")),(0,i.kt)("p",null,"In versions ",(0,i.kt)("inlineCode",{parentName:"p"},"v7.6.0")," and earlier, the build workflow was based on the DHAO Workflow. The DHAO Workflow used dhao files to record which types and functions had changed. When HybridCLR loaded a DHE assembly, it would determine whether to call the original AOT function or execute the new code based on the changes recorded in the dhao file.  "),(0,i.kt)("p",null,"The dhao file was generated by comparing the latest hot update DHE DLL with the original DHE DLL in the main package. While its principle was straightforward, the downside was that if multiple main packages were released, a separate dhao file would be required for each main package. This process became complex and difficult to manage when there were many main packages."),(0,i.kt)("p",null,"Starting from version ",(0,i.kt)("inlineCode",{parentName:"p"},"v7.7.0"),", the MetaVersion Workflow was introduced to address these shortcomings of the DHAO Workflow."),(0,i.kt)("h2",{id:"principle"},"Principle"),(0,i.kt)("p",null,"The MetaVersion Workflow assigns a unique version number to each type and function in a DLL. When loading a DHE assembly using ",(0,i.kt)("inlineCode",{parentName:"p"},"RuntimeApi.LoadDifferentialHybridAssemblyWithMetaVersion"),", it compares the meta version of the latest hot update assembly with the meta version of the AOT snapshot in the current main package to determine whether a type or function has changed. This approach only requires generating a single meta version file for each hot update DHE DLL, which can be used for hot updates across all main packages."),(0,i.kt)("h2",{id:"basic-concepts"},"Basic Concepts"),(0,i.kt)("p",null,"Before diving into the MetaVersion Workflow, it is essential to understand several key terms:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Snapshot"),(0,i.kt)("li",{parentName:"ul"},"Inject Rule files"),(0,i.kt)("li",{parentName:"ul"},"Meta Version files"),(0,i.kt)("li",{parentName:"ul"},"Meta Spec files"),(0,i.kt)("li",{parentName:"ul"},"manifest.json"),(0,i.kt)("li",{parentName:"ul"},"signature-mapper.json")),(0,i.kt)("h3",{id:"snapshot"},"Snapshot"),(0,i.kt)("p",null,"A Snapshot is a collection of files required to generate meta version files, including:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"DLL files"),(0,i.kt)("li",{parentName:"ul"},"Inject Rule files"),(0,i.kt)("li",{parentName:"ul"},"manifest.json"),(0,i.kt)("li",{parentName:"ul"},"Meta Version files"),(0,i.kt)("li",{parentName:"ul"},"Meta Spec files"),(0,i.kt)("li",{parentName:"ul"},"signature-mapper.json")),(0,i.kt)("p",null,"There are two types of Snapshots: AOT Snapshot and HotUpdate Snapshot."),(0,i.kt)("h3",{id:"inject-rule-files"},"Inject Rule Files"),(0,i.kt)("p",null,"By default, code is injected at the beginning of almost all DHE functions. This injection can significantly mitigate the problem of dirty function propagation, but it increases code size and introduces a small amount of additional overhead. Inject Rule files are used to customize injection rules, allowing certain functions to be excluded from injection. For detailed documentation, see ",(0,i.kt)("a",{parentName:"p",href:"./injectrules"},"Function Injection Policies"),"."),(0,i.kt)("h3",{id:"manifestjson"},"manifest.json"),(0,i.kt)("p",null,"This file records information such as the list of DHE assemblies. When comparing and calculating the meta version files of two AOT Snapshots, it checks the consistency of the DHE assembly list. Only AOT Snapshots with identical DHE assembly lists can correctly calculate the meta version."),(0,i.kt)("h3",{id:"meta-version-files"},"Meta Version Files"),(0,i.kt)("p",null,"Meta Version files store version information for all metadata. When loading a DHE assembly, the system compares the meta version file of the hot update assembly with the original DHE assembly's meta version file to determine whether changes have occurred, and subsequently decides whether to call the original AOT function or execute the interpreted function."),(0,i.kt)("p",null,"Meta Version files use the ",(0,i.kt)("inlineCode",{parentName:"p"},".mv.bytes")," suffix."),(0,i.kt)("h3",{id:"meta-spec-files"},"Meta Spec Files"),(0,i.kt)("p",null,"Meta Spec files are human-readable versions of Meta Version files. These files are not used during runtime. It is recommended to add them to version control, but they should not be included in the hot update resource system, as they serve no purpose there!"),(0,i.kt)("p",null,"There are two types of Meta Spec files:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*.mv.spec"),": Records complete meta version information."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*.mv.diff.spec"),": Records changes in the meta version information. This file can be used to quickly identify which types and functions have changed.")),(0,i.kt)("h3",{id:"signature-mapperjson"},"signature-mapper.json"),(0,i.kt)("p",null,"When C# code is modified (especially when types or functions are added or removed), the tokens for the same types and functions in the generated DLL may change. If the meta version file only records these metadata tokens, it would take a significant amount of time at runtime to establish the mapping between old and new tokens. A better solution is to record the signature information of each token and quickly establish the mapping by comparing signatures."),(0,i.kt)("p",null,"Since signature strings are very long, to save space and facilitate runtime comparison, these strings are mapped to unique integers in advance. The ",(0,i.kt)("inlineCode",{parentName:"p"},"signature-mapper.json")," file records this mapping relationship."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"signature-mapper.json")," file is only needed when generating meta version files and is not used during runtime. It is recommended to add this file to version control, but it should not be included in the hot update resource system!"),(0,i.kt)("h2",{id:"build-and-hot-update-workflow"},"Build and Hot Update Workflow"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Building the Main Package")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Export the main package project or build the main package directly."),(0,i.kt)("li",{parentName:"ul"},"Create the corresponding AOT Snapshot."),(0,i.kt)("li",{parentName:"ul"},"Add the meta version files from the AOT Snapshot to the main package's StreamingAssets directory (optional but highly recommended)."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Publishing Hot Updates")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Create a HotUpdate Snapshot."),(0,i.kt)("li",{parentName:"ul"},"Add the hot update DLLs and meta version files from the HotUpdate Snapshot to the hot update resource system.")))),(0,i.kt)("h2",{id:"aot-snapshot"},"AOT Snapshot"),(0,i.kt)("p",null,"The AOT Snapshot records the AOT information of the main package and has several core functions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"It records its own meta version information."),(0,i.kt)("li",{parentName:"ul"},"It is used to calculate the meta version information for subsequent main package versions."),(0,i.kt)("li",{parentName:"ul"},"It is used to calculate the meta version information for hot update code.")),(0,i.kt)("p",null,"The directory structure of an AOT Snapshot is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"  AotSnapshotDir\n    \u251c\u2500\u2500 *.dll\n    \u251c\u2500\u2500 InjectRules\n    \u251c\u2500\u2500 MetaVersions\n      \u251c\u2500\u2500 *.mv.bytes\n      \u251c\u2500\u2500 *.mv.spec\n      \u251c\u2500\u2500 *.mv.diff.spec\n    \u251c\u2500\u2500 signature-mapper.json\n    \u2514\u2500\u2500 manifest.json\n")),(0,i.kt)("p",null,"The AOT Snapshot is fully determined during the main package build process. Please add it to your project's version control system."),(0,i.kt)("p",null,"Since the ",(0,i.kt)("inlineCode",{parentName:"p"},"*.mv.bytes")," file from the AOT Snapshot is required when loading a DHE assembly using ",(0,i.kt)("inlineCode",{parentName:"p"},"RuntimeApi::LoadDifferentialHybridAssemblyWithMetaVersion"),", it is recommended to include this file with the main package."),(0,i.kt)("h3",{id:"creating-an-aot-snapshot"},"Creating an AOT Snapshot"),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"The DLLs in the AOT Snapshot must match the binary code of the main package exactly. Please create the AOT Snapshot ",(0,i.kt)("strong",{parentName:"p"},"after")," exporting the project or building the main package! Do not use the AOT DLLs generated by ",(0,i.kt)("inlineCode",{parentName:"p"},"HybridCLR/Generate/All"),"!")),(0,i.kt)("p",null,"The process is as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create the base AOT snapshot file."),(0,i.kt)("li",{parentName:"ul"},"Generate the meta version for the DHE DLLs in the base AOT snapshot.")),(0,i.kt)("h4",{id:"creating-the-base-aot-snapshot-file"},"Creating the Base AOT Snapshot File"),(0,i.kt)("p",null,"Call ",(0,i.kt)("inlineCode",{parentName:"p"},"MetaVersionWorkflow.CreateAotSnapshot(BuildTarget target, string outputSnapshotDir)")," to create the base snapshot file."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"CreateAotSnapshot")," performs the following tasks:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Copies all AOT and DHE DLLs."),(0,i.kt)("li",{parentName:"ul"},"Copies the inject rule files to the ",(0,i.kt)("inlineCode",{parentName:"li"},"InjectRules")," directory."),(0,i.kt)("li",{parentName:"ul"},"Creates a ",(0,i.kt)("inlineCode",{parentName:"li"},"manifest.json")," file, which records the list of all DHE assemblies.")),(0,i.kt)("p",null,"The base snapshot directory structure is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"  AotSnapshot\n  \u251c\u2500\u2500 *.dll\n  \u251c\u2500\u2500 InjectRules\n        \u251c\u2500\u2500 rule1.xml\n        \u251c\u2500\u2500 rule2.xml\n  \u2514\u2500\u2500 manifest.json\n")),(0,i.kt)("h4",{id:"generating-meta-version-files-for-dhe-dlls-in-the-base-aot-snapshot"},"Generating Meta Version Files for DHE DLLs in the Base AOT Snapshot"),(0,i.kt)("p",null,"Call ",(0,i.kt)("inlineCode",{parentName:"p"},"MetaVersionWorkflow.GenerateAotSnapshotMetaVersionFiles(string prevSnapshotDir, string curSnapshotDir)")," to generate the meta version files for the DHE DLLs in the snapshot."),(0,i.kt)("p",null,"The rules for the ",(0,i.kt)("inlineCode",{parentName:"p"},"prevSnapshotDir")," parameter in ",(0,i.kt)("inlineCode",{parentName:"p"},"MetaVersionWorkflow.GenerateAotSnapshotMetaVersionFiles")," are as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If this is the first AOT Snapshot (i.e., there is no older AOT Snapshot), ",(0,i.kt)("inlineCode",{parentName:"li"},"prevSnapshotDir")," should be ",(0,i.kt)("inlineCode",{parentName:"li"},"null"),"."),(0,i.kt)("li",{parentName:"ul"},"If the project uses a single main package mode (i.e., only one main package is valid at a time and a new main package invalidates the old one), ",(0,i.kt)("inlineCode",{parentName:"li"},"prevSnapshotDir")," should be ",(0,i.kt)("inlineCode",{parentName:"li"},"null"),"."),(0,i.kt)("li",{parentName:"ul"},"If the project uses a ",(0,i.kt)("strong",{parentName:"li"},"multi-main package")," mode (i.e., old main packages remain valid after a new one is released), the ",(0,i.kt)("inlineCode",{parentName:"li"},"prevSnapshotDir")," parameter should point to the most recently released AOT Snapshot directory with the same build target.")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"GenerateAotSnapshotMetaVersionFiles")," generates the following files:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Meta Version files, placed in the ",(0,i.kt)("inlineCode",{parentName:"li"},"MetaVersions")," directory."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"signature-mapper.json")," file.")),(0,i.kt)("p",null,"The directory structure before generation is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"  Snapshots\n  \u251c\u2500\u2500 PrevAotSnapshotDir\n      \u251c\u2500\u2500 *.dll\n      \u251c\u2500\u2500 InjectRules\n      \u251c\u2500\u2500 MetaVersions\n        \u251c\u2500\u2500 *.mv.bytes\n        \u251c\u2500\u2500 *.mv.spec\n        \u251c\u2500\u2500 *.mv.diff.spec\n      \u251c\u2500\u2500 signature-mapper.json\n      \u2514\u2500\u2500 manifest.json\n  \u251c\u2500\u2500 CurrentSnapshotDir\n      \u251c\u2500\u2500 *.dll\n      \u251c\u2500\u2500 InjectRules\n      \u2514\u2500\u2500 manifest.json\n")),(0,i.kt)("p",null,"After generation, the ",(0,i.kt)("inlineCode",{parentName:"p"},"MetaVersions")," directory and ",(0,i.kt)("inlineCode",{parentName:"p"},"signature-mapper.json")," file are added. The final directory structure is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"  Snapshots\n  \u251c\u2500\u2500 PrevAotSnapshotDir\n      \u251c\u2500\u2500 *.dll\n      \u251c\u2500\u2500 InjectRules\n      \u251c\u2500\u2500 MetaVersions\n        \u251c\u2500\u2500 *.mv.bytes\n        \u251c\u2500\u2500 *.mv.spec\n        \u251c\u2500\u2500 *.mv.diff.spec\n      \u251c\u2500\u2500 signature-mapper.json\n      \u2514\u2500\u2500 manifest.json\n  \u251c\u2500\u2500 CurrentAotSnapshotDir\n      \u251c\u2500\u2500 *.dll\n      \u251c\u2500\u2500 InjectRules\n      \u251c\u2500\u2500 MetaVersions (New)\n        \u251c\u2500\u2500 *.mv.bytes\n        \u251c\u2500\u2500 *.mv.spec\n        \u251c\u2500\u2500 *.mv.diff.spec\n      \u251c\u2500\u2500 signature-mapper.json (New)\n      \u2514\u2500\u2500 manifest.json\n")),(0,i.kt)("h4",{id:"multi-platform-considerations"},"Multi-Platform Considerations"),(0,i.kt)("p",null,"Most games are released on multiple platforms. Since there are significant differences in the main package AOT DLLs between platforms, it is ",(0,i.kt)("strong",{parentName:"p"},"strongly recommended")," to maintain separate AOT Snapshot trees for each platform. The directory structure should be similar to the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"  Snapshots\n  \u251c\u2500\u2500 PreAotSnapshotDir-StandaloneWindows64\n  \u251c\u2500\u2500 CurrentAotSnapshotDir-StandaloneWindows64\n  \u251c\u2500\u2500 PreAotSnapshotDir-Android64\n  \u251c\u2500\u2500 CurrentAotSnapshotDir-Android64\n  \u251c\u2500\u2500 PreAotSnapshotDir-iOS\n  \u251c\u2500\u2500 CurrentAotSnapshotDir-iOS\n")),(0,i.kt)("p",null,"For example, when calculating the meta version for a newly released Win64 main package, use the snapshot directory of the previously released Win64 main package and the new main package's snapshot to compute the meta version for the new main package."),(0,i.kt)("h4",{id:"version-control"},"Version Control"),(0,i.kt)("p",null,"The directory structure mentioned in the previous section is not convenient for version control. A more suitable directory structure for version control is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"  Snapshots\n  \u251c\u2500\u2500 AotSnapshotDir-StandaloneWindows64\n  \u251c\u2500\u2500 AotSnapshotDir-Android64\n  \u251c\u2500\u2500 AotSnapshotDir-iOS\n")),(0,i.kt)("p",null,"The Snapshot update process is as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create a temporary ",(0,i.kt)("inlineCode",{parentName:"li"},"CurrentAotSnapshotDir-{buildTarget}")," directory for the latest main package."),(0,i.kt)("li",{parentName:"ul"},"Compare ",(0,i.kt)("inlineCode",{parentName:"li"},"CurrentAotSnapshotDir-{buildTarget}")," with ",(0,i.kt)("inlineCode",{parentName:"li"},"AotSnapshotDir-{buildTarget}")," to generate the meta version files for ",(0,i.kt)("inlineCode",{parentName:"li"},"CurrentAotSnapshotDir-{buildTarget}"),"."),(0,i.kt)("li",{parentName:"ul"},"Replace ",(0,i.kt)("inlineCode",{parentName:"li"},"AotSnapshotDir-{buildTarget}")," with ",(0,i.kt)("inlineCode",{parentName:"li"},"CurrentAotSnapshotDir-{buildTarget}"),"."),(0,i.kt)("li",{parentName:"ul"},"Commit ",(0,i.kt)("inlineCode",{parentName:"li"},"AotSnapshotDir-{buildTarget}")," to the repository.")),(0,i.kt)("h2",{id:"hotupdate-snapshot"},"HotUpdate Snapshot"),(0,i.kt)("p",null,"A HotUpdate Snapshot is created each time a code hot update is published. Compared to an AOT Snapshot, a HotUpdate Snapshot only contains the following files:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The latest hot update assembly files"),(0,i.kt)("li",{parentName:"ul"},"The meta version information for the latest DHE assemblies"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"signature-mapper.json"))),(0,i.kt)("p",null,"The directory structure is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"  HotUpdateSnapshotDir\n    \u251c\u2500\u2500 *.dll\n    \u251c\u2500\u2500 MetaVersions\n      \u251c\u2500\u2500 *.mv.bytes\n      \u251c\u2500\u2500 *.mv.spec\n      \u251c\u2500\u2500 *.mv.diff.spec\n    \u251c\u2500\u2500 signature-mapper.json (New)\n")),(0,i.kt)("p",null,"When publishing a hot update, only the hot update assembly DLL files and the meta version files for the DHE assemblies are needed. Add these files to the hot update resource system."),(0,i.kt)("h3",{id:"creating-a-hotupdate-snapshot"},"Creating a HotUpdate Snapshot"),(0,i.kt)("p",null,"The creation process is as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"HybridCLR/CompileDll/ActivedBuildTarget")," to generate the hot update DLLs."),(0,i.kt)("li",{parentName:"ul"},"Generate the meta version files for the hot update assemblies.")),(0,i.kt)("p",null,"Call ",(0,i.kt)("inlineCode",{parentName:"p"},"MetaVersionWorkflow.GenerateHotUpdateMetaVersionFiles(string aotSnapshotDir, string hotUpdateSnapshotDir)")," to generate the meta version files for the hot update assemblies. Here, ",(0,i.kt)("inlineCode",{parentName:"p"},"aotSnapshotDir")," is the latest ",(0,i.kt)("inlineCode",{parentName:"p"},"AotSnapshot-{buildTarget}")," directory, and ",(0,i.kt)("inlineCode",{parentName:"p"},"hotUpdateSnapshotDir")," is the directory containing the latest hot update assemblies."),(0,i.kt)("p",null,"After calling this function, the meta version files for the DHE assemblies will be generated in the ",(0,i.kt)("inlineCode",{parentName:"p"},"{hotUpdateSnapshotDir}/MetaVersions")," directory. The directory structure is similar to the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"  HotUpdateSnapshot\n  \u251c\u2500\u2500 *.dll\n")))}h.isMDXComponent=!0}}]);