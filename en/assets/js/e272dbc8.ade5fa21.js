"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4255],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>_});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=s(n),h=a,_=p["".concat(c,".").concat(h)]||p[h]||u[h]||r;return n?o.createElement(_,l(l({ref:t},d),{},{components:n})):o.createElement(_,l({ref:t},d))}));function _(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var s=2;s<r;s++)l[s]=n[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2567:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var o=n(7462),a=(n(7294),n(3905));const r={},l="il2cpp bug log",i={unversionedId:"basic/il2cppbugs",id:"basic/il2cppbugs",title:"il2cpp bug log",description:"Contravariant covariant generic interface call error",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/basic/il2cppbugs.md",sourceDirName:"basic",slug:"/basic/il2cppbugs",permalink:"/en/docs/basic/il2cppbugs",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Source and Debug",permalink:"/en/docs/basic/sourceinspect"},next:{title:"\u5546\u4e1a\u5316\u7248\u672c",permalink:"/en/docs/business"}},c={},s=[{value:"Contravariant covariant generic interface call error",id:"contravariant-covariant-generic-interface-call-error",level:2},{value:"obj.Func() non-virtual call does not conform to the specification",id:"objfunc-non-virtual-call-does-not-conform-to-the-specification",level:2},{value:"When the struct contains class type objects, the pack of StructLayout will not take effect",id:"when-the-struct-contains-class-type-objects-the-pack-of-structlayout-will-not-take-effect",level:2},{value:"Generic array function does not set token",id:"generic-array-function-does-not-set-token",level:2},{value:"throw null will cause a crash",id:"throw-null-will-cause-a-crash",level:2},{value:"When the this of the close delegate is null, the exception thrown is out of specification",id:"when-the-this-of-the-close-delegate-is-null-the-exception-thrown-is-out-of-specification",level:2},{value:"The delegate calling code generated in 2019 does not handle the open delegate correctly and this is ValueType",id:"the-delegate-calling-code-generated-in-2019-does-not-handle-the-open-delegate-correctly-and-this-is-valuetype",level:2},{value:"mono and il2cpp do not support calling InvokeDyanmic on the open delegate of the instance method",id:"mono-and-il2cpp-do-not-support-calling-invokedyanmic-on-the-open-delegate-of-the-instance-method",level:2},{value:"2019 WebGL platform generated object member access code does not check for null references",id:"2019-webgl-platform-generated-object-member-access-code-does-not-check-for-null-references",level:2}],d={toc:s},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"il2cpp-bug-log"},"il2cpp bug log"),(0,a.kt)("h2",{id:"contravariant-covariant-generic-interface-call-error"},"Contravariant covariant generic interface call error"),(0,a.kt)("p",null,'There is an error in finding the interface implementation of obj. According to the specification, the following code should print "Comput B". For example, .net 6 is the result, but "Comput A" is printed under mono and il2cpp.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'\ninterface ITest<out T>\n{\n     T Comput();\n}\n\nclass A : ITest<object>\n{\n     public object Comput()\n     {\n         return "Comput A";\n     }\n}\n\nclass B : A, ITest<string>\n{\n     public string Comput()\n     {\n         return "Comput B";\n     }\n}\n\nclass app\n{\n     public static void Main()\n     {\n         ITest<object> f = new B();\n         Debug. Log(f. Comput());\n     }\n}\n\n')),(0,a.kt)("h2",{id:"objfunc-non-virtual-call-does-not-conform-to-the-specification"},"obj.Func() non-virtual call does not conform to the specification"),(0,a.kt)("p",null,'The ECMA specification allows non-virtual calls to null using the call instruction, but il2cpp inserts a NullCheck operation before the call. As a result, the following code will print "hello" under mono, but throw NullReferenceException under il2cpp.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'\nclass TestNull\n{\n     public void Show()\n     {\n         Debug. Log("hello");\n     }\n}\n\nclass app\n{\n     public void Main()\n     {\n         TestNull nu = null;\n         nu. Show();\n     }\n}\n\n')),(0,a.kt)("h2",{id:"when-the-struct-contains-class-type-objects-the-pack-of-structlayout-will-not-take-effect"},"When the struct contains class type objects, the pack of StructLayout will not take effect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"     [StructLayout( LayoutKind. Sequential, Pack = 1)]\n     struct StructWithoutClass\n     {\n         byte a;\n         long b;\n     }\n\n     [StructLayout(LayoutKind. Sequential, Pack = 1)]\n     struct StructWithClass\n     {\n         byte a;\n         object b;\n     }\n")),(0,a.kt)("p",null,"The size calculated by these two structs under x64 should both be 9, and this is also verified by running the .net 6 program test. But in mono, the first structure calculates the value as 9 and the 2nd as 16."),(0,a.kt)("h2",{id:"generic-array-function-does-not-set-token"},"Generic array function does not set token"),(0,a.kt)("p",null,"metadata/ArrayMetadata.cpp"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"     static MethodInfo* ConstructGenericArrayMethod(const GenericArrayMethod& genericArrayMethod, Il2CppClass* klass, Il2CppGenericContext* context)\n     {\n         MethodInfo* inflatedMethod = (MethodInfo*)MetadataCalloc(1, sizeof(MethodInfo));\n         inflatedMethod->name = StringUtils::StringDuplicate(genericArrayMethod.name.c_str());\n         inflatedMethod->klass = klass;\n\n         const MethodInfo* methodToCopyDataFrom = genericArrayMethod. method;\n         if (genericArrayMethod. method->is_generic)\n         {\n             const Il2CppGenericMethod* genericMethod = MetadataCache::GetGenericMethod(genericArrayMethod.method, context->class_inst, context->method_inst);\n             methodToCopyDataFrom = GenericMethod::GetMethod(genericMethod);\n\n             inflatedMethod->is_inflated = true;\n             inflatedMethod->genericMethod = genericMethod;\n             inflatedMethod->rgctx_data = methodToCopyDataFrom->rgctx_data;\n         }\n         // ==={{ add by HybridCLR\n         inflatedMethod->token = methodToCopyDataFrom->token;\n         // ===}} add by HybridCLR\n         inflatedMethod->slot = methodToCopyDataFrom->slot;\n         inflatedMethod->parameters_count = methodToCopyDataFrom->parameters_count;\n         inflatedMethod->parameters = methodToCopyDataFrom->parameters;\n         inflatedMethod->return_type = methodToCopyDataFrom->return_type;\n\n         inflatedMethod->methodPointer = methodToCopyDataFrom->methodPointer;\n         inflatedMethod->invoker_method = methodToCopyDataFrom->invoker_method;\n\n         return inflatedMethod;\n     }\n")),(0,a.kt)("h2",{id:"throw-null-will-cause-a-crash"},"throw null will cause a crash"),(0,a.kt)("p",null,"For c# code ",(0,a.kt)("inlineCode",{parentName:"p"},"throw ex;")," will generate the following code, which crashes when ",(0,a.kt)("inlineCode",{parentName:"p"},"ex = null"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"     IL2CPP_RAISE_MANAGED_EXCEPTION(L_107, TestCase_Run_m5B897FE9D1ABDC1AA114D3482A6613BAAE3243F6_RuntimeMethod_var);\n")),(0,a.kt)("h2",{id:"when-the-this-of-the-close-delegate-is-null-the-exception-thrown-is-out-of-specification"},"When the this of the close delegate is null, the exception thrown is out of specification"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Delegate.Create(XXInstanceMethod, null)")," should throw a NullReferenceException when called, but the unity2021 version throws an ArgumentException."),(0,a.kt)("h2",{id:"the-delegate-calling-code-generated-in-2019-does-not-handle-the-open-delegate-correctly-and-this-is-valuetype"},"The delegate calling code generated in 2019 does not handle the open delegate correctly and this is ValueType"),(0,a.kt)("p",null,"When using open delegate, and ref ValueType as this parameter, two calls will be made by mistake!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"     if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))\n     {\n         typedef int32_t (*FunctionPointerType) (RuntimeObject*, int32_t, const RuntimeMethod*);\n         result = ((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(___a0) - 1), ___b1, targetMethod);\n     }\n     if (targetThis == NULL)\n     {\n         typedef int32_t (*FunctionPointerType) (RuntimeObject*, int32_t, const RuntimeMethod*);\n         result = ((FunctionPointerType)targetMethodPointer)((RuntimeObject*)(reinterpret_cast<RuntimeObject*>(___a0) - 1), ___b1, targetMethod);\n     }\n     else\n     {\n         typedef int32_t (*FunctionPointerType) (void*, FT_AOT_ValueType_t851DF541610F2A3DE72568571355F3953F0063AF *, int32_t, const RuntimeMethod*);\n         result = ((FunctionPointerType)targetMethodPointer)(targetThis, ___a0, ___b1, targetMethod);\n     }\n\n")),(0,a.kt)("h2",{id:"mono-and-il2cpp-do-not-support-calling-invokedyanmic-on-the-open-delegate-of-the-instance-method"},"mono and il2cpp do not support calling InvokeDyanmic on the open delegate of the instance method"),(0,a.kt)("p",null,"will throw an 'Object does not match target type' error."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'     public void void_class_intp_open_reflection()\n     {\n         var b = new FT_Class() { x = 1, y = 2f, z = "abc" };\n         var m = typeof(FT_Class).GetMethod("Run");\n         var del = (Action<FT_Class, int>)Delegate.CreateDelegate(typeof(Action<FT_Class, int>), null, m);\n         del. DynamicInvoke(b, 4);\n         Assert.Equal(5, b.x);\n\n         var dd = del + del;\n         dd.DynamicInvoke(b, 1);\n         Assert.Equal(7, b.x);\n\n         Assert. ExpectException<NullReferenceException>();\n         del.DynamicInvoke(null, 4);\n         Assert. Fail();\n     }\n')),(0,a.kt)("h2",{id:"2019-webgl-platform-generated-object-member-access-code-does-not-check-for-null-references"},"2019 WebGL platform generated object member access code does not check for null references"),(0,a.kt)("p",null,"A null pointer is not checked when fetching a class member field. It is currently found that this is only the case with the WebGL platform."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"\n//WebGL platform does not have NullCheck\nIL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void FT_AOT_Class_Run2_m0451FFC153671CD294EB1178A01AB2D92202624C (FT_AOT_Class_t03C2F346FF0EA8694088FD3F901E6536935FB2BA * ___s0, int32_t ___b1, const RuntimeMethod* method)\n{\n{\n// s.x += b;\nFT_AOT_Class_t03C2F346FF0EA8694088FD3F901E6536935FB2BA * L_0 = ___s0;\nFT_AOT_Class_t03C2F346FF0EA8694088FD3F901E6536935FB2BA * L_1 = L_0;\nint32_t L_2 = L_1->get_x_0();\nint32_t L_3 = ___b1;\nL_1->set_x_0(((int32_t)il2cpp_codegen_add((int32_t)L_2, (int32_t)L_3)));\n// }\nreturn;\n}\n}\n\n// Other platforms have NullCheck\nIL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void FT_AOT_Class_Run2_m0451FFC153671CD294EB1178A01AB2D92202624C (FT_AOT_Class_t03C2F346FF0EA8694088FD3F901E6536935FB2BA * ___s0, int32_t ___b1, const RuntimeMethod* method)\n{\n{\n// s.x += b;\nFT_AOT_Class_t03C2F346FF0EA8694088FD3F901E6536935FB2BA * L_0 = ___s0;\nFT_AOT_Class_t03C2F346FF0EA8694088FD3F901E6536935FB2BA * L_1 = L_0;\nNullCheck(L_1);\nint32_t L_2 = L_1->get_x_0();\nint32_t L_3 = ___b1;\nNullCheck(L_1);\nL_1->set_x_0(((int32_t)il2cpp_codegen_add((int32_t)L_2, (int32_t)L_3)));\n// }\nreturn;\n}\n}\n")))}u.isMDXComponent=!0}}]);