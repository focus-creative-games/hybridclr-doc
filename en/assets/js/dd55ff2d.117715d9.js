"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9178],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>y});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=l,y=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(y,o(o({ref:t},u),{},{components:n})):r.createElement(y,o({ref:t},u))}));function y(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,o=new Array(a);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:l,o[1]=i;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5144:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(7462),l=(n(7294),n(3905));const a={},o="Getting Started",i={unversionedId:"business/reload/quickstart",id:"business/reload/quickstart",title:"Getting Started",description:"Almost identical to the community version of Quickstart, this document only introduces the differences.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/business/reload/quickstart.md",sourceDirName:"business/reload",slug:"/business/reload/quickstart",permalink:"/en/docs/business/reload/quickstart",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/en/docs/business/reload/intro"},next:{title:"Hotreload Technology",permalink:"/en/docs/business/reload/hotreloadassembly"}},s={},c=[{value:"Install",id:"install",level:2},{value:"Enable full generic sharing",id:"enable-full-generic-sharing",level:2},{value:"used in the code",id:"used-in-the-code",level:2},{value:"Precautions",id:"precautions",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...a}=e;return(0,l.kt)(d,(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"getting-started"},"Getting Started"),(0,l.kt)("p",null,"Almost identical to the community version of ",(0,l.kt)("a",{parentName:"p",href:"/en/docs/beginner/quickstart"},"Quickstart"),", this document only introduces the differences."),(0,l.kt)("h2",{id:"install"},"Install"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"After decompressing hybridclr_unity, put it in the project Packages directory and rename it to com.code-philosophy.hybridclr"),(0,l.kt)("li",{parentName:"ul"},"Decompress the corresponding ",(0,l.kt)("inlineCode",{parentName:"li"},"libil2cpp-{version}.7z")," according to your unity version"),(0,l.kt)("li",{parentName:"ul"},"Open ",(0,l.kt)("inlineCode",{parentName:"li"},"HybridCLR/Installer"),", turn on the ",(0,l.kt)("inlineCode",{parentName:"li"},"Copy libil2cpp from Local")," option, select the libil2cpp directory you just decompressed, and install it"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Unity 2022+ version needs to use the modified version of UnityEngine.CoreModule.dll"),", see ",(0,l.kt)("a",{parentName:"li",href:"/en/docs/business/reload/modifydll"},"Modify dll")," for details")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"installer",src:n(9456).Z,width:"805",height:"263"})),(0,l.kt)("h2",{id:"enable-full-generic-sharing"},"Enable full generic sharing"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The 2020 version does not support fully generic sharing"),(0,l.kt)("li",{parentName:"ul"},"The 2021 version needs to set the IL2CPP Code Generation option to ",(0,l.kt)("inlineCode",{parentName:"li"},"faster(smaller)")),(0,l.kt)("li",{parentName:"ul"},"Full generic sharing is enabled by default in the 2022 version and cannot be turned off. If you set the IL2CPP Code Generation option to ",(0,l.kt)("inlineCode",{parentName:"li"},"faster(smaller)"),", you can further reduce the package body.")),(0,l.kt)("h2",{id:"used-in-the-code"},"used in the code"),(0,l.kt)("p",null,"Call ",(0,l.kt)("inlineCode",{parentName:"p"},"RuntimeApi.UnloadAssembly")," to unload the assembly, call ",(0,l.kt)("inlineCode",{parentName:"p"},"Assembly.Load")," to reload the assembly. It is currently not supported to load the assembly again without unloading the assembly, the sample code is as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'     // first load\n     Assembly ass = Assembly. Load(yyy);\n\n     // execute some code\n     Type mainType = ass. GetType("Entry");\n     mainType. GetMethod("Main"). Invoke(null, null);\n\n     // first uninstall\n     RuntimeApi. UnloadAssembly(ass);\n\n     // second load\n     Assembly newAss = Assembly. Load(yyy);\n\n     // execute some code\n     Type mainType = ass. GetType("Entry");\n     mainType. GetMethod("Main"). Invoke(null, null);\n\n     // second uninstall\n     RuntimeApi. UnloadAssembly(ass);\n')),(0,l.kt)("h2",{id:"precautions"},"Precautions"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"It is easy for async or coroutines to implicitly keep references to the unloaded assembly code in other threads. Be sure to clean up all async or coroutine functions before unloading"),(0,l.kt)("li",{parentName:"ul"},"OnClick or various callback events of the UI can easily cause references to the uninstall assembly to be kept, so it must be cleaned up"),(0,l.kt)("li",{parentName:"ul"},"Registered to the global event or other elevation, it is easy to accidentally keep a reference to the uninstall assembly, be sure to clean it up")))}p.isMDXComponent=!0},9456:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/ultimate-installer-8a4fc30b6b8adf2de3a8b75efd16894c.jpg"}}]);