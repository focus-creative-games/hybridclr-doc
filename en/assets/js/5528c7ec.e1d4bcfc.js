"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8174],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),p=d(a),h=i,m=p["".concat(s,".").concat(h)]||p[h]||c[h]||o;return a?n.createElement(m,l(l({ref:t},u),{},{components:a})):n.createElement(m,l({ref:t},u))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,l=new Array(o);l[0]=h;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[p]="string"==typeof e?e:i,l[1]=r;for(var d=2;d<o;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},60726:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var n=a(87462),i=(a(67294),a(3905));const o={},l="DHAO Workflow",r={unversionedId:"business/ultimate/dhaoworkflow",id:"business/ultimate/dhaoworkflow",title:"DHAO Workflow",description:"If you are using hybridclr version >= v7.7.0, it is recommended to use the MetaVersion Workflow.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/business/ultimate/dhaoworkflow.md",sourceDirName:"business/ultimate",slug:"/business/ultimate/dhaoworkflow",permalink:"/en/docs/business/ultimate/dhaoworkflow",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MetaVersion Workflow",permalink:"/en/docs/business/ultimate/metaversionworkflow"},next:{title:"User Manual",permalink:"/en/docs/business/ultimate/manual"}},s={},d=[{value:"Principle",id:"principle",level:2},{value:"Basic Concepts",id:"basic-concepts",level:2},{value:"AOT Snapshot",id:"aot-snapshot",level:3},{value:"Inject Rule Files",id:"inject-rule-files",level:3},{value:"manifest.json",id:"manifestjson",level:3},{value:"dhao Files",id:"dhao-files",level:3},{value:"spec Files",id:"spec-files",level:3},{value:"Build and Hot Update Workflow",id:"build-and-hot-update-workflow",level:2},{value:"Create AOT Snapshot",id:"create-aot-snapshot",level:2},{value:"Generate dhao",id:"generate-dhao",level:2},{value:"Multi-platform and Multi-main Package",id:"multi-platform-and-multi-main-package",level:2},{value:"Merge Multiple dhao Files (Not Recommended)",id:"merge-multiple-dhao-files-not-recommended",level:2}],u={toc:d},p="wrapper";function c(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"dhao-workflow"},"DHAO Workflow"),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"If you are using hybridclr version >= v7.7.0, it is recommended to use the ",(0,i.kt)("a",{parentName:"p",href:"./metaversionworkflow"},"MetaVersion Workflow"),".")),(0,i.kt)("p",null,"The DHAO workflow is the longest-used workflow for DHE hot updates. Before version v7.6.0 and earlier, only the DHAO workflow was supported."),(0,i.kt)("h2",{id:"principle"},"Principle"),(0,i.kt)("p",null,"When loading DHE assemblies, you need to know which types and functions have changed to decide whether the runtime should call the original AOT code or interpret and execute the latest hot update code. This difference calculation relies on the original DHE and latest DHE assemblies,\nand the calculation is very complex and time-consuming, making it impossible to calculate in real-time during runtime, so an offline calculation method is used. The calculated difference information is saved in the dhao file."),(0,i.kt)("p",null,"The DHAO workflow principle is simple, but since dhao files are calculated based on the latest DHE and original DHE, if there are multiple main packages after official release, you need to generate corresponding dhao files for each main package.\nWhen there are many main packages, this process is relatively complex and difficult to manage. The ","[MetaVersion workflow]"," completely solves this pain point."),(0,i.kt)("h2",{id:"basic-concepts"},"Basic Concepts"),(0,i.kt)("p",null,"Understanding the DHAO workflow requires understanding the following terms:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"AOT Snapshot"),(0,i.kt)("li",{parentName:"ul"},"inject rule files"),(0,i.kt)("li",{parentName:"ul"},"manifest.json"),(0,i.kt)("li",{parentName:"ul"},"dhao files"),(0,i.kt)("li",{parentName:"ul"},"spec files")),(0,i.kt)("h3",{id:"aot-snapshot"},"AOT Snapshot"),(0,i.kt)("p",null,"AOT Snapshot is a collection of files needed to calculate dhao files, which includes the following files:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"dll files"),(0,i.kt)("li",{parentName:"ul"},"inject rule files"),(0,i.kt)("li",{parentName:"ul"},"manifest.json")),(0,i.kt)("p",null,"AOT Snapshot records the main package AOT information, and its core function is to calculate the dhao files needed for hot updates."),(0,i.kt)("p",null,"The directory structure of AOT Snapshot is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"  AotSnapshotDir\n    \u251c\u2500\u2500 *.dll\n    \u251c\u2500\u2500 InjectRules\n    \u2514\u2500\u2500 manifest.json\n")),(0,i.kt)("p",null,"AOT Snapshot information is completely determined when building the main package, please add it to the project's version control system."),(0,i.kt)("h3",{id:"inject-rule-files"},"Inject Rule Files"),(0,i.kt)("p",null,"By default, code is injected at the beginning of almost all DHE functions. Injected code can greatly alleviate the dirty function contamination problem, but the disadvantage is that it increases code size and brings a small amount of additional overhead. Inject Rule files are used to\ncustomize code injection rules, allowing some functions not to be injected. For detailed documentation, see ",(0,i.kt)("a",{parentName:"p",href:"./injectrules"},"Function Injection Strategy"),"."),(0,i.kt)("h3",{id:"manifestjson"},"manifest.json"),(0,i.kt)("p",null,"Records information such as the DHE assembly list."),(0,i.kt)("h3",{id:"dhao-files"},"dhao Files"),(0,i.kt)("p",null,"dhao files record the changed types and functions in DHE assemblies. When executing those changed functions, it will automatically switch to interpretation execution."),(0,i.kt)("p",null,"dhao files use the ",(0,i.kt)("inlineCode",{parentName:"p"},".dhao.bytes")," suffix."),(0,i.kt)("h3",{id:"spec-files"},"spec Files"),(0,i.kt)("p",null,"spec files are the readable version of dhao files, this file is not used during runtime. It is recommended to add it to the repository, but do not add it to the hot update resource system, as it serves no purpose!"),(0,i.kt)("h2",{id:"build-and-hot-update-workflow"},"Build and Hot Update Workflow"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Build main package",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Export main package project or directly build main package"),(0,i.kt)("li",{parentName:"ul"},"Create AOT Snapshot"))),(0,i.kt)("li",{parentName:"ul"},"Release hot update",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Compile hot update dll"),(0,i.kt)("li",{parentName:"ul"},"Calculate dhao files based on AOT Snapshot and latest hot update dll"),(0,i.kt)("li",{parentName:"ul"},"Add hot update dll and dhao files to hot update resource system")))),(0,i.kt)("h2",{id:"create-aot-snapshot"},"Create AOT Snapshot"),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"The dll in AOT Snapshot must exactly match the binary code in the built main package, please be sure to create it ",(0,i.kt)("strong",{parentName:"p"},"after exporting the project")," or ",(0,i.kt)("strong",{parentName:"p"},"Build"),"! You cannot use the AOT dll generated by ",(0,i.kt)("inlineCode",{parentName:"p"},"HybridCLR/Generate/All"),"!")),(0,i.kt)("p",null,"Call ",(0,i.kt)("inlineCode",{parentName:"p"},"DhaoWorkflow.CreateAotSnapshot(BuildTarget target, string outputSnapshotDir)")," to create AOT Snapshot files."),(0,i.kt)("p",null,"Please add AOT Snapshot to version control for future use."),(0,i.kt)("h2",{id:"generate-dhao"},"Generate dhao"),(0,i.kt)("p",null,"Generation process:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"HybridCLR/CompileDll/ActivedBuildTarget")," to compile the latest hot update dll.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Call ",(0,i.kt)("inlineCode",{parentName:"p"},"DhaoWorkflow.GenerateDhaoFiles(string aotSnapshotDir, string hotUpdateSnapshotDir, string dhaoOutputDir)")," to generate dhao files."),(0,i.kt)("p",{parentName:"li"},"aotSnapshotDir is the AOT Snapshot directory created when building the main package. hotUpdateSnapshotDir is the latest hot update dll directory. dhaoOutputDir is the dhao file output directory."))),(0,i.kt)("h2",{id:"multi-platform-and-multi-main-package"},"Multi-platform and Multi-main Package"),(0,i.kt)("p",null,"Due to the implementation principle of dhao, each time a hot update is released, each ",(0,i.kt)("inlineCode",{parentName:"p"},"{main package-platform}")," combination needs to generate separate dhao files."),(0,i.kt)("h2",{id:"merge-multiple-dhao-files-not-recommended"},"Merge Multiple dhao Files (Not Recommended)"),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"Merging dhao files will cause performance degradation, use this feature with caution!!!")),(0,i.kt)("p",null,"If you find it troublesome to provide separate dhao files for each main package, you can consider merging the dhao files of all main packages under the same platform into one dhao file. Call ",(0,i.kt)("inlineCode",{parentName:"p"},"DhaoWorkflow.MergeDhaoFile")," to complete this work."),(0,i.kt)("p",null,"Merging dhao files of all main packages into one dhao file has a disadvantage: the final output dhao file records type and function changes as the union of type and function changes in all input dhao files. This means that if a function only\nchanged in an old main package but not in the latest main package, the merged dhao file will mark this function as changed, causing this function to be executed in interpretation mode even in the latest main package. This brings performance degradation."))}c.isMDXComponent=!0}}]);