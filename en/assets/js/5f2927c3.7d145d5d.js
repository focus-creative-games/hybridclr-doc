"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3650],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>y});var i=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},o=Object.keys(e);for(i=0;i<o.length;i++)a=o[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)a=o[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var d=i.createContext({}),m=function(e){var t=i.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=m(e.components);return i.createElement(d.Provider,{value:t},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=m(a),u=n,y=s["".concat(d,".").concat(u)]||s[u]||c[u]||o;return a?i.createElement(y,r(r({ref:t},p),{},{components:a})):i.createElement(y,r({ref:t},p))}));function y(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,r=new Array(o);r[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[s]="string"==typeof e?e:n,r[1]=l;for(var m=2;m<o;m++)r[m]=a[m];return i.createElement.apply(null,r)}return i.createElement.apply(null,a)}u.displayName="MDXCreateElement"},7679:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var i=a(7462),n=(a(7294),a(3905));const o={},r="Impact on App Memory",l={unversionedId:"basic/impactonappmemory",id:"basic/impactonappmemory",title:"Impact on App Memory",description:"The impact of hybridclr on the App runtime memory is mainly composed of the following parts:",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/basic/impactonappmemory.md",sourceDirName:"basic",slug:"/basic/impactonappmemory",permalink:"/en/docs/basic/impactonappmemory",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Impact On the App Size",permalink:"/en/docs/basic/impactonappsize"},next:{title:"Unsupported Features",permalink:"/en/docs/basic/notsupportedfeatures"}},d={},m=[{value:"test",id:"test",level:2},{value:"Summarize",id:"summarize",level:2},{value:"Community Edition",id:"community-edition",level:3},{value:"Professional Edition",id:"professional-edition",level:3},{value:"Ultimate Edition",id:"ultimate-edition",level:3}],p={toc:m},s="wrapper";function c(e){let{components:t,...a}=e;return(0,n.kt)(s,(0,i.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"impact-on-app-memory"},"Impact on App Memory"),(0,n.kt)("p",null,"The impact of hybridclr on the App runtime memory is mainly composed of the following parts:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Dynamic heap memory"),(0,n.kt)("li",{parentName:"ul"},"(Increase) Maintain the memory occupied by the bridge function mapping"),(0,n.kt)("li",{parentName:"ul"},"(Increase) Interpreter thread data stack and frame stack memory"),(0,n.kt)("li",{parentName:"ul"},"(Increase) Memory occupied by instruction optimization module (",(0,n.kt)("strong",{parentName:"li"},"only available in commercial version"),")"),(0,n.kt)("li",{parentName:"ul"},"(Increase) Additional metadata memory usage related to DHE (",(0,n.kt)("strong",{parentName:"li"},"only available on Ultimate Edition"),")"),(0,n.kt)("li",{parentName:"ul"},"(",(0,n.kt)("strong",{parentName:"li"},"Reduce"),") Optimize libil2cpp metadata memory management (",(0,n.kt)("strong",{parentName:"li"},"only available on commercial versions"),"). Significantly reduced metadata memory overhead"),(0,n.kt)("li",{parentName:"ul"},"Static Code Segment Memory"),(0,n.kt)("li",{parentName:"ul"},"(Added) The bridge function MehtodBridge.cpp increases the binary code size after compilation"),(0,n.kt)("li",{parentName:"ul"},"(Increased) Additional code bloat introduced by DHE code injection resulting in increased binary size (",(0,n.kt)("strong",{parentName:"li"},"only available on Ultimate builds"),")"),(0,n.kt)("li",{parentName:"ul"},"(",(0,n.kt)("strong",{parentName:"li"},"Reduce"),") Reduce binary code size by converting AOT assemblies to normal interpreted assemblies (excluding DHE assemblies, because DHE assemblies also need to be compiled into AOT)")),(0,n.kt)("admonition",{type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"Although the increased static code segment memory size will be displayed in the total memory of the App, it does not represent the actual memory usage of the code. Static Code segment codes are loaded on demand. To see the actual memory usage, you need to check the data of ",(0,n.kt)("inlineCode",{parentName:"p"},"Actual Physical Memory Occupied (RSS)"),".")),(0,n.kt)("p",null,"We built a test project to test the actual impact of hybridclr on the package body."),(0,n.kt)("h2",{id:"test"},"test"),(0,n.kt)("p",null,"We tested the memory usage of the Android Armv8 platform apk built in Unity 2021."),(0,n.kt)("p",null,"The AOT part of the test project fully includes the following frameworks and libraries:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"mscorlib, System, System.Core"),(0,n.kt)("li",{parentName:"ul"},"UnityEngine.dll, UnityEngine.CoreModule.dll, UnityEngine.UI.dll, UnityEngine.PhysicsModule.dll"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/EllanJiang/GameFramework"},"GameFramework framework")),(0,n.kt)("li",{parentName:"ul"},"HybridCLR.Runtime.dll"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/focus-creative-games/luban"},"Luban")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/Cysharp/UniTask"},"UniTask")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/tuyoogame/YooAsset"},"YooAsset"))),(0,n.kt)("p",null,"We counted the total size of the AOT module dll after building the apk: a total of 12.0M."),(0,n.kt)("p",null,"The hot update code of the test project consists of the following parts:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Unit test engineering code"),(0,n.kt)("li",{parentName:"ul"},"Configuration code generated by Luban")),(0,n.kt)("p",null,"The compiled HotUpdate.dll is 1216k."),(0,n.kt)("p",null,"The size of the bridge function MethodBridge.cpp is 15088K."),(0,n.kt)("p",null,"We compared the memory usage of the following situations:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"NotHybridCLR-NotHotUpdateCode: HybridCLR is not connected, and HotUpdate code is not included"),(0,n.kt)("li",{parentName:"ul"},"NotHybridCLR-HotUpdateCode is not connected to HybridCLR, including HotUpdate code"),(0,n.kt)("li",{parentName:"ul"},"HybridCLR Community Edition-NotHotUpdateCode connects to the HybridCLR Community Edition, does not contain HotUpdate code, and generates bridge function files normally"),(0,n.kt)("li",{parentName:"ul"},"HybridCLR Community Edition-HotUpdateCode is connected to the HybridCLR Community Edition, including HotUpdate code, and generates bridge function files normally"),(0,n.kt)("li",{parentName:"ul"},"HybridCLR Professional Edition-NotHotUpdateCode Access to HybridCLR Professional Edition, does not contain HotUpdate code, and generates bridge function files normally"),(0,n.kt)("li",{parentName:"ul"},"HybridCLR Professional Edition-HotUpdateCode is connected to HybridCLR Professional Edition, including HotUpdate code, and generates bridge function files normally"),(0,n.kt)("li",{parentName:"ul"},"HybridCLR Ultimate Edition-NotHotUpdateCode Access to HybridCLR Ultimate Edition, does not contain HotUpdate code, and generates bridge functions normally"),(0,n.kt)("li",{parentName:"ul"},"HybridCLR Ultimate Edition - HotUpdateCode-LoadOriginalDifferentialHybridAssembly Access to HybridCLR Ultimate Edition, including HotUpdate code, normal generation of bridge functions, HotUpdate assembly is not changed, use RuntimeApi::LoadOriginalDifferentialHybridAssembly to load HotUpdate"),(0,n.kt)("li",{parentName:"ul"},"HybridCLR Ultimate Edition - HotUpdateCode - LoadDifferentialHybridAssembly Access to HybridCLR Ultimate Edition, including HotUpdate code, normal generation of bridge functions, HotUpdate assembly is not changed, use RuntimeApi::LoadDifferentialHybridAssembly to load HotUpdate")),(0,n.kt)("p",null,"The test results are as follows:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Build method"),(0,n.kt)("th",{parentName:"tr",align:null},"App heap memory (K)"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"NotHybridCLR-NotHotUpdateCode"),(0,n.kt)("td",{parentName:"tr",align:null},"51343")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"NotHybridCLR-HotUpdateCode"),(0,n.kt)("td",{parentName:"tr",align:null},"59400")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"HybridCLR Community Edition-NotHotUpdateCode"),(0,n.kt)("td",{parentName:"tr",align:null},"53592")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"HybridCLR Community Edition-HotUpdateCode"),(0,n.kt)("td",{parentName:"tr",align:null},"65695")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"HybridCLR Professional Edition-NotHotUpdateCode"),(0,n.kt)("td",{parentName:"tr",align:null},"50380")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"HybridCLR Professional Edition-HotUpdateCode"),(0,n.kt)("td",{parentName:"tr",align:null},"62235")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"HybridCLR Ultimate-NotHotUpdateCode"),(0,n.kt)("td",{parentName:"tr",align:null},"52531")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"HybridCLR Ultimate Edition-HotUpdateCode-LoadOriginalDifferentialHybridAssembly"),(0,n.kt)("td",{parentName:"tr",align:null},"61276")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"HybridCLR Ultimate Edition-HotUpdateCode-LoadDifferentialHybridAssembly"),(0,n.kt)("td",{parentName:"tr",align:null},"65655")))),(0,n.kt)("p",null,"Based on the above test items, we can draw the following conclusions:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"(Increase) The bridge function occupies about ",(0,n.kt)("inlineCode",{parentName:"li"},"{bridge function file MethodBridge.cpp file size} * 0.1")," size of heap memory"),(0,n.kt)("li",{parentName:"ul"},"(Increase) Each thread executing the hot update code will occupy about 1.2M memory"),(0,n.kt)("li",{parentName:"ul"},"(Added) instruction optimization module (",(0,n.kt)("strong",{parentName:"li"},"only available in commercial version"),") takes up about 700K"),(0,n.kt)("li",{parentName:"ul"},"(Increased) Additional metadata memory usage related to DHE (",(0,n.kt)("strong",{parentName:"li"},"only available in Ultimate Edition"),"). Approximately ",(0,n.kt)("inlineCode",{parentName:"li"},"{total size of AOT assemblies + total size of DHE assemblies} * 0.12")," in memory"),(0,n.kt)("li",{parentName:"ul"},"(Increase) The binary code size of the bridge function MehtodBridge.cpp increases after compilation. Approximately ",(0,n.kt)("inlineCode",{parentName:"li"},"{MethodBridge.cpp file size} * 0.3")),(0,n.kt)("li",{parentName:"ul"},"(ADDED) DHE (",(0,n.kt)("strong",{parentName:"li"},"Ultimate only"),") Code injection introduces additional code which increases binary size. Approximately ",(0,n.kt)("inlineCode",{parentName:"li"},"{DHE assembly size} * 0.86")),(0,n.kt)("li",{parentName:"ul"},"(",(0,n.kt)("strong",{parentName:"li"},"Reduce"),") Optimize libil2cpp metadata memory management (",(0,n.kt)("strong",{parentName:"li"},"only available in commercial version"),"), reducing metadata memory overhead by ",(0,n.kt)("inlineCode",{parentName:"li"},"10-25%")),(0,n.kt)("li",{parentName:"ul"},"(",(0,n.kt)("strong",{parentName:"li"},"Reduce"),") Reduce binary code size by converting AOT assemblies to normal interpreted assemblies (excluding DHE assemblies, because DHE assemblies also need to be compiled into AOT). Approximately ",(0,n.kt)("inlineCode",{parentName:"li"},"{hot update assembly size} * 5.2")," size")),(0,n.kt)("h2",{id:"summarize"},"Summarize"),(0,n.kt)("h3",{id:"community-edition"},"Community Edition"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The newly added heap memory is approximately ",(0,n.kt)("inlineCode",{parentName:"li"},"{MethodBridge.cpp size} * 0.1")," + ",(0,n.kt)("inlineCode",{parentName:"li"},"1.2M * {number of threads that have executed interpreted code}")," + ",(0,n.kt)("inlineCode",{parentName:"li"},"{hot update assembly size} * 2.2")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Increase")," Code segment memory is about ",(0,n.kt)("inlineCode",{parentName:"li"},"{MethodBridge.cpp size} * 0.3")," - ",(0,n.kt)("inlineCode",{parentName:"li"},"{Hot update assembly size} * 5.2"))),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"Generally speaking, the binary code will be reduced after accessing the community version, that is, the ",(0,n.kt)("inlineCode",{parentName:"p"},"added memory of code segment")," is generally a ",(0,n.kt)("strong",{parentName:"p"},"negative value"),".")),(0,n.kt)("h3",{id:"professional-edition"},"Professional Edition"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The newly added heap memory is approximately ",(0,n.kt)("inlineCode",{parentName:"li"},"{MethodBridge.cpp size} * 0.1")," + 0.7M (instruction optimization module memory) + ",(0,n.kt)("inlineCode",{parentName:"li"},"1.2M * {number of threads that have executed interpreted code}")," + ",(0,n.kt)("inlineCode",{parentName:"li"},"{hot update assembly size} * 1.6")," - ",(0,n.kt)("inlineCode",{parentName:"li"},"{all assembly sizes} * 0.2")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Increase")," Code segment memory is about ",(0,n.kt)("inlineCode",{parentName:"li"},"{MethodBridge.cpp size} * 0.3")," - ",(0,n.kt)("inlineCode",{parentName:"li"},"{Hot update assembly size} * 5.2"))),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"Generally speaking, the binary code will be reduced after accessing the professional version, that is, the ",(0,n.kt)("inlineCode",{parentName:"p"},"added memory of code segment")," is generally a ",(0,n.kt)("strong",{parentName:"p"},"negative value"),".")),(0,n.kt)("h3",{id:"ultimate-edition"},"Ultimate Edition"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The newly added heap memory is approximately ",(0,n.kt)("inlineCode",{parentName:"li"},"{MethodBridge.cpp size} * 0.1")," + 0.7M (instruction optimization module memory) + ",(0,n.kt)("inlineCode",{parentName:"li"},"1.2M * {number of threads that have executed interpreted code}")," + ",(0,n.kt)("inlineCode",{parentName:"li"},"{hot update assembly size} * 3")," + ",(0,n.kt)("inlineCode",{parentName:"li"},"{total size of AOT assemblies + total size of DHE assemblies} * 0.12")," - ",(0,n.kt)("inlineCode",{parentName:"li"},"{size of all assemblies} * 0.2")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Increase")," Code segment memory to approximately ",(0,n.kt)("inlineCode",{parentName:"li"},"{DHE assembly size} * 0.86")," + ",(0,n.kt)("inlineCode",{parentName:"li"},"{MethodBridge.cpp size} * 0.3"))),(0,n.kt)("admonition",{type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"Since the sample project is small, the test results may not be consistent with the actual project. ",(0,n.kt)("inlineCode",{parentName:"p"},"{hot update assembly size} * 3")," This part of memory is obviously overestimated. Please refer to the actual project.")))}c.isMDXComponent=!0}}]);