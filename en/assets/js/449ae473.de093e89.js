"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7333],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},k=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(t),k=a,d=u["".concat(p,".").concat(k)]||u[k]||m[k]||o;return t?r.createElement(d,i(i({ref:n},c),{},{components:t})):r.createElement(d,i({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=k;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}k.displayName="MDXCreateElement"},34104:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=t(87462),a=(t(67294),t(3905));const o={},i="MonoPInvokeCallback Support",l={unversionedId:"basic/monopinvokecallback",id:"basic/monopinvokecallback",title:"MonoPInvokeCallback Support",description:"When interacting with third-party languages like Lua, you need to call C# functions from these third-party languages. Two problems must be solved:",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/basic/monopinvokecallback.md",sourceDirName:"basic",slug:"/basic/monopinvokecallback",permalink:"/en/docs/basic/monopinvokecallback",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"PInvoke Support",permalink:"/en/docs/basic/pinvoke"},next:{title:"AOT Generics",permalink:"/en/docs/basic/aotgeneric"}},p={},s=[{value:"Reserving ReversePInvokeWrapper Functions",id:"reserving-reversepinvokewrapper-functions",level:2},{value:"Limitations",id:"limitations",level:2}],c={toc:s},u="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"monopinvokecallback-support"},"MonoPInvokeCallback Support"),(0,a.kt)("p",null,"When interacting with third-party languages like Lua, you need to call C# functions from these third-party languages. Two problems must be solved:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"How to get the native function pointer corresponding to a C# function"),(0,a.kt)("li",{parentName:"ol"},"How to handle parameter passing and return values for complex types like string")),(0,a.kt)("p",null,"Mono and il2cpp use ",(0,a.kt)("inlineCode",{parentName:"p"},"[MonoPInvokeCallbackAttribute]")," to solve these problems. When a static managed function has this attribute, a separate C++ wrapper function is generated for it,\nand calling ",(0,a.kt)("inlineCode",{parentName:"p"},"Marshal.GetFunctionPointerForDelegate")," can get that function pointer. Additionally, the wrapper function handles complex parameters or return values like string. Taking the ",(0,a.kt)("inlineCode",{parentName:"p"},"string"),"\ntype as an example, the wrapper function converts native ",(0,a.kt)("inlineCode",{parentName:"p"},"const char*")," type data to a managed ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," object in C#, and converts the ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," type return value to ",(0,a.kt)("inlineCode",{parentName:"p"},"const char*")," before returning to native."),(0,a.kt)("p",null,"Similarly, HybridCLR also needs to generate corresponding wrapper functions for each function marked with ",(0,a.kt)("inlineCode",{parentName:"p"},"[MonoPInvokeCallback]"),". But for platforms like iOS that prohibit JIT, obviously these wrapper functions can't be dynamically generated at runtime. Therefore, corresponding wrapper functions need to be pre-reserved for such functions that may be used in the future."),(0,a.kt)("h2",{id:"reserving-reversepinvokewrapper-functions"},"Reserving ReversePInvokeWrapper Functions"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"HybridCLR/Generate/ReversePInvokeWrapper")," by default generates one wrapper function for each function with the ",(0,a.kt)("inlineCode",{parentName:"p"},"[MonoPInvokeCallbackAttribute]")," attribute.\nBut if we only generate the same number of wrapper functions as the current functions with ",(0,a.kt)("inlineCode",{parentName:"p"},"[MonoPInvokeCallbackAttribute]")," attribute, adding new hot update functions later\nwill cause insufficient wrapper functions. The solution is to use ",(0,a.kt)("inlineCode",{parentName:"p"},"HybridCLR.ReversePInvokeWrapperGenerationAttribute")," for reservation."),(0,a.kt)("p",null,"Add a new attribute ",(0,a.kt)("inlineCode",{parentName:"p"},"[ReversePInvokeWrapperGeneration(int preserveCount)]")," to functions with ",(0,a.kt)("inlineCode",{parentName:"p"},"MonoPInvokeCallbackAttribute"),", then preserveCount wrapper functions are generated for ",(0,a.kt)("strong",{parentName:"p"},"this signature"),". If this attribute is not included, only one wrapper function will be generated for this function. If multiple functions with the same signature have the ",(0,a.kt)("inlineCode",{parentName:"p"},"[ReversePInvokeWrapperGeneration(xx)]")," attribute, the total number of wrapper functions is ",(0,a.kt)("inlineCode",{parentName:"p"},"sum of all preserveCount + number of functions without ReversePInvokeWrapperGenerationAttribute attribute"),"."),(0,a.kt)("p",null,"As shown below, ",(0,a.kt)("inlineCode",{parentName:"p"},"LuaFunction")," type has 10 wrappers, ",(0,a.kt)("inlineCode",{parentName:"p"},"Func<int, int, int>")," type has 101 wrappers, and ",(0,a.kt)("inlineCode",{parentName:"p"},"Func<int, int>")," type has 1 wrapper."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"\n[UnmanagedFunctionPointer(CallingConvention.Cdecl)]\ndelegate int LuaFunction(IntPtr luaState);\n\npublic class MonoPInvokeWrapperPreserves\n{\n    [ReversePInvokeWrapperGeneration(10)]\n    [MonoPInvokeCallback(typeof(LuaFunction))]\n    public static int LuaCallback(IntPtr luaState)\n    {\n        return 0;\n    }\n\n    [ReversePInvokeWrapperGeneration(100)]\n    [MonoPInvokeCallback(typeof(Func<int, int, int>))]\n    public static int Sum(int a, int b)\n    {\n        return a + b;\n    }\n\n    [MonoPInvokeCallback(typeof(Func<int, int, int>))]\n    public static int Sum2(int a, int b)\n    {\n        return a + b;\n    }\n\n    [MonoPInvokeCallback(typeof(Func<int, int>))]\n    public static int Inc(int a)\n    {\n        return a + 1;\n    }\n}\n\n")),(0,a.kt)("h2",{id:"limitations"},"Limitations"),(0,a.kt)("p",null,"Currently, when calling MonoPInvokeCallback type functions, parameters are not marshalled. Common int and float types work normally, but for parameters like string, since the native layer passes 'char*', it's not marshalled to string, and direct use will inevitably crash!"),(0,a.kt)("p",null,"If you encounter string type parameters, there are two solutions:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Put the callback function in AOT, then callback to hot update functions from AOT."),(0,a.kt)("li",{parentName:"ol"},"Change the parameter to IntPtr type, then call Marshal.PtrToStringUTF8 to convert the IntPtr type raw char* data to string. Example code is shown below.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"    [MonoPInvokeCallback(typeof(Func<Intptr, int>))]\n    public static int Inc(IntPtr ptr)\n    {\n        string s = Marshal.PtrToStringUTF8(ptr);\n        return s.Length;\n    }\n\n")),(0,a.kt)("p",null,"Other non-primitive type parameters that need marshalling can be handled in the same way."))}m.isMDXComponent=!0}}]);