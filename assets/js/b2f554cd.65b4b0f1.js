"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1477],{10:n=>{n.exports=JSON.parse('{"blogPosts":[{"id":"instructions","metadata":{"permalink":"/blog/instructions","source":"@site/blog/2022-07-14-instructions.md","title":"hybridclr\u6307\u4ee4\u96c6\u8bbe\u8ba1","description":"\u539f\u59cbIL\u6307\u4ee4\u96c6\u662f\u57fa\u4e8e\u6808\u7684\u6307\u4ee4\u96c6\uff0c\u4f18\u70b9\u662f\u6307\u4ee4\u4e2a\u6570\u5c11\u3001\u4f18\u96c5\u3001\u7d27\u51d1\uff0c\u975e\u5e38\u9002\u5408\u8868\u793a\u865a\u62df\u673a\u903b\u8f91\uff0c\u4f46\u5e76\u4e0d\u9002\u5408\u88ab\u89e3\u91ca\u5668\u9ad8\u6548\u89e3\u91ca\u8fd0\u884c\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5c06\u5b83\u8f6c\u6362\u4e3a\u81ea\u5b9a\u4e49\u7684\u53e6\u4e00\u79cd\u80fd\u591f\u9ad8\u6548","date":"2022-07-14T00:00:00.000Z","formattedDate":"2022\u5e747\u670814\u65e5","tags":[],"readingTime":23.22,"hasTruncateMarker":false,"authors":[{"name":"walon"}],"frontMatter":{"slug":"instructions","authors":{"name":"walon"}},"nextItem":{"title":"hybridclr\u6280\u672f\u539f\u7406\u5256\u6790","permalink":"/blog/principle"}},"content":"\u539f\u59cbIL\u6307\u4ee4\u96c6\u662f\u57fa\u4e8e\u6808\u7684\u6307\u4ee4\u96c6\uff0c\u4f18\u70b9\u662f\u6307\u4ee4\u4e2a\u6570\u5c11\u3001\u4f18\u96c5\u3001\u7d27\u51d1\uff0c\u975e\u5e38\u9002\u5408\u8868\u793a\u865a\u62df\u673a\u903b\u8f91\uff0c\u4f46\u5e76\u4e0d\u9002\u5408\u88ab\u89e3\u91ca\u5668\u9ad8\u6548\u89e3\u91ca\u8fd0\u884c\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5c06\u5b83\u8f6c\u6362\u4e3a\u81ea\u5b9a\u4e49\u7684\u53e6\u4e00\u79cd\u80fd\u591f\u9ad8\u6548\\n\u89e3\u91ca\u6267\u884c\u7684\u6307\u4ee4\u96c6\uff0c\u7136\u540e\u518d\u5728\u6211\u4eec\u7684\u89e3\u91ca\u5668\u4e2d\u8fd0\u884c\u3002\\n\\n## IL\u6307\u4ee4\u96c6\u7684\u7f3a\u9677\\n\\n- IL\u662f\u57fa\u4e8e\u6808\u7684\u6307\u4ee4\uff0c\u8fd0\u884c\u65f6\u7ef4\u62a4\u6267\u884c\u6808\u662f\u4e2a\u65e0\u8c13\u7684\u5f00\u9500\\n- IL\u6709\u5927\u91cf\u5355\u6307\u4ee4\u591a\u529f\u80fd\u7684\u6307\u4ee4\uff0c\u5982add\u6307\u4ee4\u53ef\u4ee5\u7528\u4e8e\u8ba1\u7b97int\u3001long\u3001float\u3001double\u7c7b\u578b\u7684\u548c\uff0c\u5bfc\u81f4\u8fd0\u884c\u65f6\u9700\u8981\u6839\u636e\u4e0a\u6587\u5224\u65ad\u5230\u5e95\u8be5\u6267\u884c\u54ea\u79cd\u8ba1\u7b97\u3002\u4e0d\u4ec5\u589e\u52a0\u4e86\u8fd0\u884c\u65f6\u5224\u5b9a\u7684\u5f00\u9500\uff0c\u8fd8\u589e\u52a0\u4e86\u8fd0\u884c\u65f6\u7ef4\u62a4\u6267\u884c\u6808\u6570\u636e\u7c7b\u578b\u7684\u5f00\u9500\\n- IL\u6307\u4ee4\u5305\u542b\u4e00\u4e9b\u9700\u8981\u8fd0\u884c\u65f6resolve\u7684\u6570\u636e\uff0c\u5982newobj\u6307\u4ee4\u7b2c\u4e00\u4e2a\u53c2\u6570\u662fmethod token\u3002token resolve\u662f\u4e00\u4e2a\u5f00\u9500\u5f88\u5927\u7684\u64cd\u4f5c\uff0c\u6bcf\u6b21\u6267\u884c\u90fd\u8fdb\u884cresolve\u4f1a\u6781\u5927\u62d6\u6162\u6267\u884c\u6027\u80fd\\n- IL\u662f\u57fa\u4e8e\u6808\u7684\u6307\u4ee4\uff0c\u538b\u6808\u9000\u6808\u76f8\u5173\u6307\u4ee4\u6570\u8f83\u591a\u3002\u50cfa=b+c\u8fd9\u6837\u7684\u6307\u4ee4\u9700\u89814\u6761\u6307\u4ee4\u5b8c\u6210\uff0c\u800c\u5982\u679c\u91c7\u7528\u57fa\u4e8e\u5bc4\u5b58\u5668\u7684\u6307\u4ee4\uff0c\u5b8c\u5168\u53ef\u4ee5\u4e00\u6761\u6307\u4ee4\u5b8c\u6210\u3002\\n- IL\u4e0d\u9002\u5408\u505a\u5176\u4ed6\u4f18\u5316\u64cd\u4f5c\uff0c\u5982\u6211\u4eec\u7684InitOnce JIT\u6280\u672f\u3002\\n- \u5176\u4ed6\\n\\n## hybridclr\u4ee4\u96c6\u8bbe\u8ba1\u76ee\u6807\\n\\nhybridclr\u6307\u4ee4\u96c6\u8bbe\u8ba1\u76ee\u6807\u5c31\u662f\u89e3\u51b3\u539f\u59cbIL\u7684\u7f3a\u9677\uff0c\u4ee5\u53ca\u505a\u4e00\u4e9b\u66f4\u9ad8\u7ea7\u7684\u4f18\u5316\uff0c\u76ee\u524d\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u529f\u80fd\\n\\n- \u6307\u4ee4\u4e2d\u5305\u542b\u8981\u64cd\u4f5c\u7684\u76ee\u6807\u5730\u5740\uff0c\u4e0d\u518d\u9700\u8981\u7ef4\u62a4\u6808\\n- \u5bf9\u4e8e\u5355\u6307\u4ee4\u591a\u529f\u80fd\u6307\u9488\u9700\u8981\u4e3a\u6bcf\u79cd\u64cd\u4f5c\u6570\u636e\u7c7b\u578b\u7ef4\u62a4\u4e00\u4e2a\u5bf9\u5e94\u6307\u4ee4\uff0c\u514d\u53bb\u8fd0\u884c\u65f6\u7ef4\u62a4\u7c7b\u578b\u53ca\u5224\u5b9a\u7c7b\u578b\u7684\u5f00\u9500\u3002\u5982\u5982add\u6307\u4ee4\uff0c\u8981\u7279\u4f8b\u5316\u4e3aadd_int\u3001add_long\u4e4b\u7c7b\u7684\u6307\u4ee4\\n- \u5bf9\u4e8e\u6d89\u53ca\u5230token\u89e3\u6790\u7684\u6307\u4ee4\uff0c\u5c3d\u91cf\u8f6c\u6362\u6307\u4ee4\u65f6\u76f4\u63a5\u56fa\u5b9a\uff0c\u7701\u53bb\u8ba1\u7b97\u6216\u8005\u67e5\u8be2\u7684\u5f00\u9500\u3002\u5982 newobj\u4e2d method token\u5b57\u6bb5\uff0c\u76f4\u63a5\u8f6c\u53d8\u6210 MethodInfo* \u5143\u6570\u636e\\n- \u5bf9\u4e8e\u4e00\u4e9b\u5e38\u89c1\u64cd\u4f5c\u5982 a = b + c\uff0c\u9700\u8981 `ldloc b , ldloc c, add, stloc a` \u8fd94\u6761\u6307\u4ee4\uff0c\u6211\u4eec\u5e0c\u671b\u63d0\u4f9b\u4e13\u7528\u6307\u4ee4\u6298\u53e0\u5b83\\n- \u9700\u8981\u80fd\u4e0e\u4e00\u4e9b\u5e38\u89c1\u7684\u4f18\u5316\u6280\u672f\u914d\u5408\uff0c\u5982\u51fd\u6570inline\u3001InitOnce\u52a8\u6001jit\u6280\u672f\\n- \u9700\u8981\u8003\u8651\u5230\u8de8\u5e73\u53f0\u95ee\u9898\uff0c\u5982\u5728armv7\u8fd9\u79cd\u8981\u6c42\u5185\u5b58\u5bf9\u9f50\u7684\u786c\u4ef6\u4e0a\uff0c\u4e5f\u80fd\u9ad8\u6548\u6267\u884c\\n\\nhybridclr\u4f7f\u7528\u7ecf\u5178\u7684\u5bc4\u5b58\u5668\u6307\u4ee4\u96c6\u914d\u5408\u4e00\u4e9b\u5176\u4ed6\u8fd0\u884c\u65f6\u8bbe\u65bd\u5b9e\u73b0\u4ee5\u4e0a\u76ee\u6807\u3002\\n\\n## \u8fd0\u884c\u73af\u5883\\n\\n\u65e0\u8bba\u6307\u4ee4\u7684\u5185\u5bb9\u5982\u4f55\uff0c\u6307\u4ee4\u7684\u6267\u884c\u7ed3\u679c\u5fc5\u987b\u4ea7\u751f\u526f\u4f5c\u7528\uff08\u54ea\u6015\u662fnop\u8fd9\u79cd\u4ec0\u4e48\u4e5f\u4e0d\u5e72\u7684\u6307\u4ee4\uff0c\u4e5f\u5bfc\u81f4\u5f53\u524d\u6307\u4ee4\u5bc4\u5b58\u5668ip\u53d1\u751f\u53d8\u5316\uff09\uff0c\u800c\u8fd9\u4e9b\u526f\u4f5c\u7528\uff0c\u5fc5\u7136\u4f5c\u7528\u4e8e\u8fd0\u884c\u73af\u5883\uff08\u751a\u81f3\u6709\u53ef\u80fd\u4f5c\u7528\u4e8e\u6307\u4ee4\u672c\u8eab\uff0c\u5982InitOnce\u6280\u672f\uff09\u3002\u6b63\u56e0\u4e3a\u6307\u4ee4\u6267\u884c\u79bb\u4e0d\u5f00\u5177\u4f53\u7684\u6267\u884c\u73af\u5883\uff0c\u6307\u4ee4\u8bbe\u8ba1\u5fc5\u7136\u8ddfhybridclr\u89e3\u91ca\u5668\u53cail2cpp\u8fd0\u884c\u65f6\u7684\u8fd0\u884c\u73af\u5883\u7d27\u5bc6\u76f8\u5173\u3002\\n\\n### hybridclr\u51fd\u6570\u5e27\u6808\\n\\n\u5927\u591a\u6570\u57fa\u7840\u6307\u4ee4\u90fd\u662f\u64cd\u4f5c \u51fd\u6570\u53c2\u6570\u3001\u5c40\u90e8\u53d8\u91cf\u3001\u6267\u884c\u6808\u9876\u7684\u6570\u636e\uff0c\u5728hybridclr\u4e2d\u4f7f\u7528\u6570\u636e\u6808\u6765\u5b58\u653e\u8fd9\u4e9b\u6570\u636e\uff0c\u5e76\u4ee5\u903b\u8f91\u5730\u5740\uff08\u7c7b\u578buint16_t\uff09\u6765\u6807\u8bc6\u8981\u64cd\u4f5c\u7684\u6570\u636e\u7684\u4f4d\u7f6e\u3002\u903b\u8f91\u5730\u5740\u662f\u5c40\u90e8\u7684\uff0c\u6bcf\u4e2a\u51fd\u6570\u7684\u6267\u884c\u6808\u5e27\u7684\u903b\u8f91\u5730\u5740\u4ece0\u5f00\u59cb\uff0c\u6700\u59272^16-1\u3002\\n\\n\u903b\u8f91\u5730\u5740\u7684\u5e03\u5c40\u5982\u4e0b\\n\\n![method frame](/img/blog/method_frame.jpg)\\n\\n\u51fd\u6570\u5e27\u6839\u636e\u5176\u5d4c\u5957\u987a\u5e8f\uff0c\u5728\u6570\u636e\u6808\u4e0a\u7684\u4f4d\u7f6e\u4ece\u4f4e\u4f4d\u5411\u9ad8\u4f4d\u6269\u5c55\uff0c\u5982\u4e0b\u56fe\\n\\n![method frame](/img/blog/method_frame2.jpg)\\n\\n\u6570\u636e\u6808\u6bcf\u4e2aslot\u90fd\u4e3a\u4e00\u4e2asize=8\u7684StackObject\u7c7b\u578b\u5bf9\u8c61\uff0c\u6bcf\u4e2a\u53d8\u91cf\u53ef\u80fd\u53601\u4e2a\u6216\u591a\u4e2aslot\u3002\u4f8b\u5982int\u7c7b\u578b\u53d8\u91cf\u53ea\u5360\u4e00\u4e2aslot\uff0c\u4f46Vector3\u7c7b\u578b\u53d8\u91cf\u53602\u4e2aslot\u3002\\n\\nlocalVarBase \u6307\u9488\u4e3a\u51fd\u6570\u5e27\u6808\u7684\u57fa\u51c6\u4f4d\u7f6e\u3002\\n\\n```cpp\\nunion StackObject\\n{\\n    void* ptr; // can\'t adjust position. will raise native_invoke init args bugs.\\n    bool b;\\n    int8_t i8;\\n    uint8_t u8;\\n    int16_t i16;\\n    uint16_t u16;\\n    int32_t i32;\\n    uint32_t u32;\\n    int64_t i64;\\n    uint64_t u64;\\n    float f4;\\n    double f8;\\n    Il2CppObject* obj;\\n    Il2CppString* str;\\n    Il2CppObject** ptrObj;\\n};\\n\\nStackObject* localVarBase;\\n```\\n\\n### \u8fd0\u884c\u65f6\u76f8\u5173\\n\\n\u9664\u4e86\u53ea\u64cd\u4f5c\u51fd\u6570\u5e27\u6808\u53ca\u5f53\u524d\u51fd\u6570\u72b6\u6001\u7684\u6307\u4ee4\u5916\uff0c\u5269\u4e0b\u7684\u6307\u4ee4\u90fd\u8981\u4f9d\u8d56\u4e8eil2cpp\u8fd0\u884c\u65f6\u53cahybridclr\u89e3\u91ca\u5668\u6267\u884c\u73af\u5883MachineState\u63d0\u4f9b\u7684api\u624d\u80fd\u5b8c\u6210\u529f\u80fd\u3002\u66f4\u7ec6\u5316\u5730\u8bf4\uff0c\u53c8\u5206\u4e3a\u51e0\u7c7b\\n\\n- metadata\u6570\u636e\u76f8\u5173\u3002\u5982typeof\u6307\u4ee4\uff0c\u4f9d\u8d56\u4e8e\u8fd0\u884c\u65f6\u5c06token\u8f6c\u6362\u4e3aIl2Class*\u8fd0\u884c\u65f6metadata\\n- \u5bf9\u8c61\u76f8\u5173\u3002\u5982 ldsfld\u6307\u4ee4 \u7c7b\u578b\u9759\u6001\u6210\u5458\u8bbf\u95ee\\n- gc\u76f8\u5173\u3002\u5982newobj\u6307\u4ee4\u4f9d\u8d56\u4e8egc\u76f8\u5173\u673a\u5236\u5206\u914d\u5bf9\u8c61\u5185\u5b58\\n- \u591a\u7ebf\u7a0b\u76f8\u5173\u3002\u5982ThreadStatic\u7c7b\u578b\u7684\u7c7b\u9759\u6001\u6210\u5458\u53d8\u91cf\\n- \u5176\u4ed6\u4e00\u4e9b\u7279\u6b8a\u673a\u5236\u3002\u5982localloc\u6307\u4ee4\u4f9d\u8d56\u4e8e hybridclr\u7684MachineState\u63d0\u4f9bapi\u6765\u5206\u914d\u5185\u5b58\\n\\n## \u6307\u4ee4\u7ed3\u6784\\n\\nhybridclr\u6307\u4ee4\u7ed3\u6784\u5982\u4e0b\\n\\n![instrument](/img/blog/instrument.jpg)\\n\\n\u5176\u4e2d\u6307\u4ee4\u7684\u524d2\u5b57\u8282\u662fopcode\uff0c\u5269\u4e0b\u7684\u6307\u4ee4\u6570\u636e\u6211\u4eec\u79f0\u4e4b\u4e3a\u6307\u4ee4param\u3002param\u5206\u4e3a\u51e0\u79cd\u7c7b\u578b\uff1a\\n\\n- \u6570\u636e\u903b\u8f91\u5730\u5740\u3002\\n- \u666e\u901a\u5b57\u9762\u5e38\u91cf\u3002\u6bd4\u5982`a = b + 5`\uff0c\u5176\u4e2d\u5e38\u91cf5\u5fc5\u7136\u8981\u4f53\u73b0\u5230\u6307\u4ee4\u4e4b\u4e2d\\n- resolve\u540e\u7684\u6570\u636e\u3002\u5982 `ldtoken`\uff0c\u4e3a\u4e86\u4f18\u5316\u6027\u80fd\u4e0d\u60f3\u6bcf\u6b21\u6267\u884c\u65f6\u8ba1\u7b97token\uff0c\u90a3\u5c31\u5fc5\u7136\u8981\u628a\u8fd0\u884c\u65f6resolve\u597d\u7684token\u5bf9\u5e94\u7684\u5143\u6570\u636e\u5305\u542b\u5230\u6307\u4ee4\u4e2d\\n- resolve\u540e\u7684\u6570\u636e\u7684\u6307\u9488\u3002\u4e00\u4e9b\u6307\u4ee4\u4e2d\u5305\u542b\u4e0d\u5b9a\u957f\u5ea6\u7684\u6570\u636e\uff0c\u5982switch\u8bed\u53e5\u53ef\u80fd\u5305\u542bn\u4e2acase\u9879\u76ee\u7684\u8df3\u8f6c\u5730\u5740\u3002\u4e3a\u4e86\u8ba9\u6307\u4ee4\u672c\u8eab\u5927\u5c0f\u56fa\u5b9a\uff0c\u6211\u4eec\u5c06\u8fd9\u4e9b\u4e0d\u5b9a\u957f\u7684\u6570\u636e\u5b58\u5230InterpMethodInfo\u7684resolvedDatas\u4e2d\uff0c\u7528\u4e00\u4e2auint32_t\u7684\u7d22\u5f15\u6307\u5411\u5b83\u7684\u4f4d\u7f6e\u3002\\n- \u5176\u4ed6\u4e00\u4e9b\u8f85\u52a9\u6570\u636e\\n- \u4e3a\u4e86\u4fdd\u8bc1param\u5185\u5b58\u5bf9\u9f50\u8bbf\u95ee\u800c\u63d2\u5165\u7684padding\u53c2\u6570\\n\\n## \u8de8\u5e73\u53f0\u517c\u5bb9\u6027\\n\\n\u6307\u4ee4\u76f4\u63a5\u76f8\u5173\u7684\u8de8\u5e73\u53f0\u517c\u5bb9\u6027\u95ee\u9898\u4e3b\u8981\u662f\u5185\u5b58\u5bf9\u9f50\u95ee\u9898\u3002\u76ee\u524darm64 CPU\u652f\u6301\u975e\u5bf9\u9f50\u7684\u5185\u5b58\u8bbf\u95ee\uff0c\u4f46armv7\u4ecd\u7136\u8981\u6c42\u5185\u5b58\u5bf9\u9f50\uff0c\u5426\u5219\u4e00\u65e6\u53d1\u751f\u975e\u5bf9\u9f50\u8bbf\u95ee\uff0c\u8981\u4e48\u5c31\u8fd0\u884c\u6548\u7387\u5927\u5e45\u4e0b\u964d\uff0c\u8981\u4e48\u76f4\u63a5\u5bfc\u81f4\u5d29\u6e83\u3002\\n\u5c3d\u7ba1\u53ef\u4ee5\u9488\u5bf964\u4f4d\u548c32\u4f4d\u8bbe\u8ba1\u4e24\u5957\u5b8c\u5168\u4e0d\u540c\u7684\u6307\u4ee4\uff0c\u4f46\u51fa\u4e8e\u65b9\u4fbf\u7ef4\u62a4\u8003\u8651\uff0chybridclr\u8fd8\u662f\u7edf\u4e00\u4f7f\u7528\u4e86\u4e00\u5957\u6307\u4ee4\u96c6\u3002\\n\\nhybridclr\u6307\u4ee4\u7684\u4e00\u4e9b\u8bbe\u8ba1\u7ea6\u675f\uff1a\\n\\n- \u6bcf\u6761\u6307\u4ee4\u7684\u524d2\u5b57\u8282\u5fc5\u987b\u4e3aopcode\\n- \u6ee1\u8db3\u5185\u5b58\u5bf9\u9f50\u3002\u6307\u4ee4param\u7684size\u53ef\u80fd\u662f1\u30012\u30014\u30018\u3002\u4e3a\u4e86\u6ee1\u8db3\u5185\u5b58\u5bf9\u9f50\u7684\u8981\u6c42\uff0c\u6211\u4eec\u5728param\u4e4b\u95f4\u63d2\u5165\u4e00\u4e9buint8_t\u7c7b\u578b\u7684\u65e0\u7528padding\u6570\u636e\u3002\\n\\n### padding\u4f18\u5316\\n\\n\u4e3a\u4e86\u6700\u5927\u7a0b\u5ea6\u51cf\u5c11\u6d6a\u8d39\u7684padding\u6570\u636e\u7a7a\u95f4\uff0c\u6211\u4eec\u5c06\u6240\u6709param\u6392\u5e8f\uff0c\u4ece\u5c0f\u5230\u5927\u6392\u5217\uff0c\u540c\u65f6\u63d2\u5165padding\u4ee5\u6ee1\u8db3\u5185\u5b58\u5bf9\u9f50\u3002\u7ecf\u8fc7\u4e0d\u592a\u590d\u6742\u7684\u63a8\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u6bcf\u6761\u6307\u4ee4\u6700\u591a\u6d6a\u8d39**7**\u5b57\u8282\u7684padding\u7a7a\u95f4\u3002\\n\\n## \u6307\u4ee4\u5b9e\u73b0\\n\\n\u7531\u4e8eIL\u6307\u4ee4\u4f17\u591a\uff0c\u6211\u4eec\u65e0\u6cd5\u4e00\u4e00\u4ecb\u7ecd\u6240\u6709\u6307\u4ee4\u5bf9\u5e94\u7684hybridclr\u6307\u4ee4\u96c6\u8bbe\u8ba1\uff0c\u6211\u4eec\u5206\u4e3a\u51e0\u5927\u7c7b\u8be6\u7ec6\u4ecb\u7ecd\u3002\\n\\n### \u7a7a\u6307\u4ee4\\n\\n\u5982nop\u3001pop\u6307\u4ee4\uff0c\u76f4\u63a5\u5728transform\u9636\u6bb5\u5c31\u88ab\u6d88\u9664\uff0c\u5b8c\u5168\u4e0d\u4ea7\u751f\u5bf9\u5e94\u7684hybridclr\u6307\u4ee4\u3002\\n\\n### \u7b80\u5355\u6570\u636e\u590d\u5236\u6307\u4ee4\\n\\n\u5178\u578b\u6709\\n\\n- \u64cd\u4f5c\u51fd\u6570\u53c2\u6570\u7684\u6307\u4ee4\u3002\u5982 ldarg\u3001starg\u3001ldarga\\n- \u64cd\u4f5c\u51fd\u6570\u5c40\u90e8\u53d8\u91cf\u7684\u6307\u4ee4\u3002\u5982 ldloc\u3001stloc\u3001ldloca\\n- \u9690\u542b\u64cd\u4f5ceval stack\u6808\u9876\u6570\u636e\u7684\u6307\u4ee4\u3002\u5982add\u3001dup\\n\\n\u5bf9\u4e8e\u64cd\u4f5c\u51fd\u6570\u5e27\u6808\u7684\u6307\u4ee4\uff0c\u4e00\u822c\u8981\u505a\u4ee5\u4e0b\u51e0\u7c7b\u5904\u7406\\n\\n- \u4e3a\u6e90\u6570\u636e\u548c\u76ee\u6807\u6570\u636e\u6dfb\u52a0\u5bf9\u5e94\u7684\u903b\u8f91\u5730\u5740\u5b57\u6bb5\\n- \u5bf9\u4e8e\u6e90\u6570\u636e\u6216\u8005\u76ee\u6807\u6570\u636e\u6709\u591a\u4e2a\u53d8\u79cd\u7684\u6307\u4ee4\uff0c\u7edf\u4e00\u4e3a\u5e26\u903b\u8f91\u5730\u5740\u5b57\u6bb5\u7684\u6307\u4ee4\u3002\u5982ldarg.0 - ldarg.3\u3001ldarg\u3001ldarg.s \u90fd\u7edf\u4e00\u4e3a\u4e00\u6761\u6307\u4ee4\u3002\\n\\n\u4ee5\u5178\u578b\u7684ldarg\u6307\u4ee4\u4e3a\u4f8b\u3002\u5982\u679c\u88ab\u64cd\u4f5c\u51fd\u6570\u53c2\u6570\u7684\u7c7b\u578b\u4e3aint\u65f6\uff0c\u5bf9\u5e94\u7684hybridclr\u6307\u4ee4\u4e3a\\n\\n```cpp\\nstruct IRCommon\\n{\\n    uint16_t opcode;\\n}\\n\\nstruct IRLdlocVarVar : IRCommon\\n{\\n    uint16_t dst; \\n    uint16_t src;\\n    uint8_t __pad6;\\n    uint8_t __pad7;\\n};\\n\\n//  \u5bf9\u5e94\u89e3\u91ca\u6267\u884c\u4ee3\u7801\\ncase HiOpcodeEnum::LdlocVarVar:\\n{\\n    uint16_t __dst = *(uint16_t*)(ip + 2);\\n    uint16_t __src = *(uint16_t*)(ip + 4);\\n    (*(uint64_t*)(localVarBase + __dst)) = (*(uint64_t*)(localVarBase + __src));\\n    ip += 8;\\n    continue;\\n}\\n\\n```\\n\\n- dst \u6307\u5411\u5f53\u524d\u6267\u884c\u6808\u9876\u7684\u903b\u8f91\u5730\u5740\\n- src ldarg\u4e2d\u8981\u52a0\u8f7d\u7684\u53d8\u91cf\u7684\u903b\u8f91\u5730\u5740\\n- __pad6 \u4e3a\u4e86\u5185\u5b58\u5bf9\u9f50\u800c\u63d2\u5165\u7684\\n- __pad7 \u540c\u4e0a\\n\\n### \u9700\u8981expand\u76ee\u6807\u6570\u636e\u7684\u6307\u4ee4\\n\\n\u6839\u636eCLI\u89c4\u8303\uff0c\u50cfbyte\u3001sbyte\u3001short\u3001ushort\u8fd9\u79cdsize\u5c0f\u4e8e4\u7684primitive\u7c7b\u578b\uff0c\u4ee5\u53caunderlying type\u4e3a\u8fd9\u4e9bprimitive\u7c7b\u578b\u7684\u679a\u4e3e\uff0c\u5b83\u4eec\u88ab\u52a0\u8f7d\u5230evaluate stack\u65f6\uff0c\u9700\u8981\u7b26\u53f7\u6269\u5c55\u4e3aint32_t\u7c7b\u578b\u6570\u636e\u3002\u6211\u4eec\u4e0d\u60f3\u6267\u884cldarg\u6307\u4ee4\u65f6\u4f5c\u8fd0\u884c\u65f6\u5224\u65ad\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u964d\u4f4e\u6027\u80fd\u3002\u56e0\u6b64\u4e3a\u8fd9\u4e9bsize\u5c0f\u4e8e4\u7684\u64cd\u4f5c\uff0c\u5355\u72ec\u8bbe\u8ba1\u4e86\u5bf9\u5e94\u7684\u6307\u4ee4\u3002\\n\\n\u4ee5byte\u7c7b\u578b\u4e3a\u4f8b\uff0c\u5bf9\u5e94\u7684hybridclr\u6307\u4ee4\u4e3a\\n\\n```cpp\\nstruct IRLdlocExpandVarVar_u1 : IRCommon\\n{\\n    uint16_t dst;\\n    uint16_t src;\\n    uint8_t __pad6;\\n    uint8_t __pad7;\\n};\\n\\n//  \u5bf9\u5e94\u89e3\u91ca\u6267\u884c\u4ee3\u7801\\ncase HiOpcodeEnum::LdlocExpandVarVar_u1:\\n{\\n    uint16_t __dst = *(uint16_t*)(ip + 2);\\n    uint16_t __src = *(uint16_t*)(ip + 4);\\n    (*(int32_t*)(localVarBase + __dst)) = (*(uint8_t*)(localVarBase + __src));\\n    ip += 8;\\n    continue;\\n}\\n```\\n\\n### \u9759\u6001\u7279\u4f8b\u5316\u7684\u6307\u4ee4\\n\\n\u6709\u4e00\u7c7b\u6307\u4ee4\u7684\u5b9e\u9645\u6267\u884c\u65b9\u5f0f\u8ddf\u5b83\u7684\u53c2\u6570\u7c7b\u578b\u6709\u5173\uff0c\u5982add\u3002\u5f53\u64cd\u4f5c\u7684\u6570\u662fint\u3001long\u3001float\u3001double\u65f6\uff0c\u6267\u884c\u5bf9\u5e94\u7c7b\u578b\u7684\u6570\u636e\u76f8\u52a0\u64cd\u4f5c\u3002\u4f46\u5b9e\u9645\u4e0a\u7531\u4e8eIL\u7a0b\u5e8f\u7684\u9759\u6001\u6027\uff0c\u6bcf\u6761\u6307\u4ee4\u64cd\u4f5c\u7684\u6570\u636e\u7c7b\u578b\u80af\u5b9a\u662f\u56fa\u5b9a\u7684\uff0c\u5e76\u4e0d\u9700\u8981\u8fd0\u884c\u65f6\u7ef4\u62a4\u6570\u636e\u7c7b\u578b\uff0c\u5e76\u4e14\u6839\u636e\u6570\u636e\u7c7b\u578b\u51b3\u5b9a\u6267\u884c\u4ec0\u4e48\u64cd\u4f5c\u3002\u6211\u4eec\u4f7f\u7528\u4e00\u79cd\u53eb`\u9759\u6001\u7279\u4f8b\u5316`\u7684\u6280\u672f\uff0c\u4e3a\u8fd9\u79cd\u6307\u4ee4\u8bbe\u8ba1\u4e86\u591a\u6761hybridclr\u6307\u4ee4\uff0c\u5728transform\u65f6\uff0c\u6839\u636e\u5177\u4f53\u7684\u64cd\u4f5c\u6570\u636e\u7c7b\u578b\uff0c\u751f\u6210\u76f8\u5e94\u7684\u6307\u4ee4\u3002\\n\\n\u4ee5add \u5bf9\u4e24\u4e2aint32_t\u7c7b\u578b\u6570\u636e\u76f8\u52a0\u4e3a\u4f8b\\n\\n```cpp\\nstruct IRBinOpVarVarVar_Add_i4 : IRCommon\\n{\\n    uint16_t ret;\\n    uint16_t op1;\\n    uint16_t op2;\\n};\\n\\n//  \u5bf9\u5e94\u89e3\u91ca\u6267\u884c\u4ee3\u7801\\ncase HiOpcodeEnum::BinOpVarVarVar_Add_i4:\\n{\\n    uint16_t __ret = *(uint16_t*)(ip + 2);\\n    uint16_t __op1 = *(uint16_t*)(ip + 4);\\n    uint16_t __op2 = *(uint16_t*)(ip + 6);\\n    (*(int32_t*)(localVarBase + __ret)) = (*(int32_t*)(localVarBase + __op1)) + (*(int32_t*)(localVarBase + __op2));\\n    ip += 8;\\n    continue;\\n}\\n```\\n\\n### \u76f4\u63a5\u5305\u542b\u5e38\u91cf\u7684\u6307\u4ee4\\n\\n\u6709\u4e00\u4e9b\u6307\u4ee4\u5305\u542b\u666e\u901a\u5b57\u9762\u5e38\u91cf\uff0c\u5982ldc\u6307\u4ee4\u3002\u76f8\u5e94\u7684\u5bc4\u5b58\u5668\u6307\u4ee4\u53ea\u662f\u7b80\u5355\u5730\u6dfb\u52a0\u4e86\u76f8\u5e94\u5927\u5c0f\u7684\u5b57\u6bb5\u3002\\n\\n\u4ee5ldc int32_t\u7c7b\u578b\u6570\u636e\u4e3a\u4f8b\\n\\n```cpp\\nstruct IRLdcVarConst_4 : IRCommon\\n{\\n    uint16_t dst;\\n    uint32_t src;\\n};\\n\\n// \u5bf9\u5e94\u89e3\u91ca\u6267\u884c\u4ee3\u7801\\ncase HiOpcodeEnum::LdcVarConst_4:\\n{\\n    uint16_t __dst = *(uint16_t*)(ip + 2);\\n    uint32_t __src = *(uint32_t*)(ip + 4);\\n    (*(int32_t*)(localVarBase + __dst)) = __src;\\n    ip += 8;\\n    continue;\\n}\\n```\\n\\n### \u9690\u542b\u5e38\u91cf\u7684\u6307\u4ee4\\n\\n\u6709\u4e00\u4e9b\u6307\u4ee4\u9690\u542b\u4e86\u6240\u64cd\u4f5c\u7684\u5e38\u91cf\uff0c\u5982 ldnull\u3001ldc.i4.0 - ldc.i4.8 \u7b49\u7b49\u3002\u5bf9\u4e8e\u8fd9\u7c7b\u6307\u4ee4\uff0c\u5982\u679c\u6709\u5bf9\u5e94\u7684`\u76f4\u63a5\u5305\u542b\u5e38\u91cf\u7684\u6307\u4ee4`\u7684\u5b9e\u73b0\uff0c\u5219\u7b80\u5355\u8f6c\u6362\u4e3a \u4e0a\u4e00\u8282\u4e2d\u4ecb\u7ecd\u7684 `\u76f4\u63a5\u5305\u542b\u5e38\u91cf\u7684\u6307\u4ee4`\u3002\u540e\u7eed\u53ef\u80fd\u4f1a\u8fdb\u4e00\u6b65\u4f18\u5316\u3002\\n\\n\u4ee5ldnull\u4e3a\u4f8b\\n\\n```cpp\\nstruct IRLdnullVar : IRCommon\\n{\\n    uint16_t dst;\\n    uint8_t __pad4;\\n    uint8_t __pad5;\\n    uint8_t __pad6;\\n    uint8_t __pad7;\\n};\\n\\n// \u5bf9\u5e94\u89e3\u91ca\u6267\u884c\u4ee3\u7801\\ncase HiOpcodeEnum::LdnullVar:\\n{\\n    uint16_t __dst = *(uint16_t*)(ip + 2);\\n    (*(void**)(localVarBase + __dst)) = nullptr;\\n    ip += 8;\\n    continue;\\n}\\n\\n```\\n\\n#### \u6307\u4ee4\u5171\u4eab\\n\\n\u4e3a\u4e86\u51cf\u5c11\u6307\u4ee4\u6570\u91cf\uff0c\u64cd\u4f5c\u76f8\u540csize\u5e38\u91cf\u7684ldc\u6307\u4ee4\u4f1a\u88ab\u5408\u5e76\u4e3a\u540c\u4e00\u4e2a\u3002\u5982ldloc.r4 \u6307\u4ee4\u5c31\u88ab\u5408\u5e76\u5230ldloc.i4\u6307\u4ee4\u7684\u5b9e\u73b0\u3002\\n\\n### \u5305\u542bresolved\u540e\u6570\u636e\u7684\u6307\u4ee4\\n\\n\u6709\u4e00\u4e9b\u6307\u4ee4\u5305\u542bmetadata token\uff0c\u5982sizeof\u3001ldstr\u3001newobj\u3002\u4e3a\u4e86\u907f\u514d\u5de8\u5927\u7684\u8fd0\u884c\u65f6resolve\u5f00\u9500\uff0chybridclr\u5728transform\u8fd9\u4e9b\u6307\u4ee4\u65f6\u5c31\u5df2\u7ecf\u5c06\u5305\u542btoken\u6570\u636eresolve\u4e3a\u5bf9\u5e94\u7684runtime metadata\u3002\\n\\n\u66f4\u7ec6\u81f4\u4e00\u4e9b\uff0c\u53c8\u5206\u4e3a\u4e24\u7c7b\u3002\\n\\n#### \u76f4\u63a5\u5305\u542bresolved\u540e\u6570\u636e\u7684\u6307\u4ee4\\n\\n\u4ee5sizeof\u4e3a\u4f8b\uff0c\u539f\u59cb\u6307\u4ee4token\u4e3a\u7c7b\u578b\u4fe1\u606f\uff0ctransform\u65f6\uff0c\u76f4\u63a5\u8ba1\u7b97\u4e86\u5bf9\u5e94ValueType\u7684size\uff0c\u751a\u81f3\u90fd\u4e0d\u9700\u8981\u4e13\u95e8\u4e3asizeof\u8bbe\u8ba1\u5bf9\u5e94\u7684\u6307\u4ee4\uff0c\u76f4\u63a5\u4f7f\u7528\u73b0\u6210\u7684LdcVarConst_4\u6307\u4ee4\u3002\\n\\n```cpp\\ncase OpcodeValue::SIZEOF:\\n{\\n    uint32_t token = (uint32_t)GetI4LittleEndian(ip + 2);\\n    Il2CppClass* objKlass = image->GetClassFromToken(token, klassContainer, methodContainer, genericContext);\\n    IL2CPP_ASSERT(objKlass);\\n    int32_t typeSize = GetTypeValueSize(objKlass);\\n    CI_ldc4(typeSize, EvalStackReduceDataType::I4);\\n    ip += 6;\\n    continue;\\n}\\n```\\n\\n### \u95f4\u63a5\u5305\u542bresolved\u540e\u6570\u636e\u7684\u6307\u4ee4\\n\\n\u50cfldstr\u3001newobj\u8fd9\u4e9b\u6307\u4ee4\u5305\u542b\u7684token\u7ecf\u8fc7resolve\u540e\uff0c\u53d8\u6210\u5bf9\u5e94runtime metadata\u7684\u6307\u9488\uff0c\u8003\u8651\u5230\u6307\u9488\u5728\u4e0d\u540c\u5e73\u53f0\u5927\u5c0f\u4e0d\u4e00\uff0c\u56e0\u6b64\u4e0d\u76f4\u63a5\u5c06\u8fd9\u4e2a\u6307\u9488\u653e\u5230\u6307\u4ee4\u4e2d\uff0c\u800c\u662f\u6362\u6210\u4e00\u4e2auint32_t\u7c7b\u578b\u7684\u6307\u5411InterpMethodInfo::resolvedData\u5b57\u6bb5\u7684index param\u3002\u6267\u884c\u8fc7\u7a0b\u4e2d\u9700\u8981\u4e00\u6b21\u5411resolvedData\u7684\u67e5\u8be2\u64cd\u4f5c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\u3002\\n\\n\\n\u4ee5newobj\u6307\u4ee4\u4e3a\u4f8b\\n\\n```cpp\\nstruct IRLdstrVar : IRCommon\\n{\\n    uint16_t dst;\\n    uint32_t str;\\n};\\n\\n// \u5bf9\u5e94\u89e3\u91ca\u6267\u884c\u4ee3\u7801\\ncase HiOpcodeEnum::LdstrVar:\\n{\\n    uint16_t __dst = *(uint16_t*)(ip + 2);\\n    uint32_t __str = *(uint32_t*)(ip + 4);\\n    (*(Il2CppString**)(localVarBase + __dst)) = ((Il2CppString*)imi->resolveDatas[__str]);\\n    ip += 8;\\n    continue;\\n}  \\n\\n```\\n\\n### \u5206\u652f\u8df3\u8f6c\u6307\u4ee4\\n\\n\u539f\u59cbIL\u5b57\u8282\u7801\u4f7f\u7528\u4e86\u76f8\u5bf9offset\u7684\u8df3\u8f6c\u76ee\u6807\uff0c\u5e76\u4e14\u51e0\u4e4e\u4e3a\u6bcf\u6761\u8df3\u8f6c\u76f8\u5173\u6307\u4ee4\u90fd\u8bbe\u8ba1\u4e86near\u548cfar offset \u4e24\u6761\u6307\u4ee4\uff0chybridclr\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u76f4\u63a5\u4f7f\u75284\u5b57\u8282\u7684\u7edd\u5bf9\u8df3\u8f6c\u5730\u5740\u3002\\n\\n\u4ee5br\u65e0\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\u4e3a\u4f8b\\n\\n```cpp\\n\\nstruct IRBranchUncondition_4 : IRCommon\\n{\\n    uint8_t __pad2;\\n    uint8_t __pad3;\\n    int32_t offset;\\n};\\n\\n// \u5bf9\u5e94\u89e3\u91ca\u6267\u884c\u4ee3\u7801\\ncase HiOpcodeEnum::BranchUncondition_4:\\n{\\n    int32_t __offset = *(int32_t*)(ip + 4);\\n    ip = ipBase + __offset;\\n    continue;\\n}\\n```\\n\\noffset\u4e3a\u8f6c\u6362\u540e\u7684\u6307\u4ee4\u5730\u5740\u7684\u7edd\u5bf9\u504f\u79fb\u3002\\n\\n### \u5bf9\u8c61\u6210\u5458\u8bbf\u95ee\u6307\u4ee4\\n\\n\u7531\u4e8e\u5b57\u6bb5\u5728\u5bf9\u8c61\u4e2d\u7684\u504f\u79fb\u5df2\u7ecf\u5b8c\u5168\u786e\u5b9a\uff0ctransform\u65f6\u8ba1\u7b97\u51fa\u5b57\u6bb5\u5728\u5bf9\u8c61\u4e2d\u7684\u504f\u79fb\uff0c\u4fdd\u5b58\u4e3a\u6307\u4ee4\u7684offset param, \u6267\u884c\u65f6\u6839\u636e\u5bf9\u8c61\u5927\u5c0f\uff0c\u4f7f\u7528this\u6307\u9488\u548c\u504f\u79fb\uff0c\u76f4\u63a5\u8bbf\u95ee\u5b57\u6bb5\u6570\u636e\u3002\\n\\n\u4ee5ldfld \u8bfb\u53d6int\u7c7b\u578b\u5b57\u6bb5\u4e3a\u4f8b\\n\\n```cpp\\n\\nstruct IRLdfldVarVar_i4 : IRCommon\\n{\\n    uint16_t dst;\\n    uint16_t obj;\\n    uint16_t offset;\\n};\\n\\n// \u5bf9\u5e94\u89e3\u91ca\u6267\u884c\u4ee3\u7801\\ncase HiOpcodeEnum::LdfldVarVar_i4:\\n{\\n    uint16_t __dst = *(uint16_t*)(ip + 2);\\n    uint16_t __obj = *(uint16_t*)(ip + 4);\\n    uint16_t __offset = *(uint16_t*)(ip + 6);\\n    CHECK_NOT_NULL_THROW((*(Il2CppObject**)(localVarBase + __obj)));\\n    (*(int32_t*)(localVarBase + __dst)) = *(int32_t*)((uint8_t*)(*(Il2CppObject**)(localVarBase + __obj)) + __offset);\\n    ip += 8;\\n    continue;\\n}\\n\\n```\\n\\n### ThreadStatic \u6210\u5458\u8bbf\u95ee\u6307\u4ee4\\n\\n\u5728\u521d\u59cb\u5316Il2CppClass\u65f6\uff0c\u5982\u679c\u5b83\u5305\u542bThreadStatic\u5c5e\u6027\u6807\u8bb0\u7684\u9759\u6001\u6210\u5458\u53d8\u91cf\uff0c\u5219\u4e3a\u5b83\u5206\u914d\u4e00\u4e2a\u53ef\u4ee5\u653e\u4e0b\u8fd9\u4e2a\u7c7b\u578b\u6240\u6709ThreadStatic\u53d8\u91cf\u7684ThreadLocalStorage\u7684\u8fde\u7eed\u7a7a\u95f4\u3002\\n\u501f\u52a9\u4e8eil2cpp\u8fd0\u884c\u65f6\u5bf9ThreadStatic\u7684\u652f\u6301\uff0c\u76f8\u5173\u6307\u4ee4\u5b9e\u73b0\u76f8\u5f53\u7b80\u5355\u76f4\u63a5\u3002\\n\\n\u4ee5ldsfld\u6307\u4ee4\u4e3a\u4f8b\\n\\n```cpp\\n\\nstruct IRLdthreadlocalVarVar_i4 : IRCommon\\n{\\n    uint16_t dst;\\n    int32_t offset;\\n    int32_t klass;\\n};\\n\\n// \u5bf9\u5e94\u89e3\u91ca\u6267\u884c\u4ee3\u7801\\ncase HiOpcodeEnum::LdthreadlocalVarVar_i4:\\n{\\n    uint16_t __dst = *(uint16_t*)(ip + 2);\\n    uint32_t __klass = *(uint32_t*)(ip + 8);\\n    int32_t __offset = *(int32_t*)(ip + 4);\\n\\n    Il2CppClass* _klass = (Il2CppClass*)imi->resolveDatas[__class];\\n    Interpreter::RuntimeClassCCtorInit(_klass);\\n    (*(int32_t*)(localVarBase + __dst)) = *(int32_t*)((byte*)il2cpp::vm::Thread::GetThreadStaticData(_klass->thread_static_fields_offset) + __offset);\\n    ip += 16;\\n    continue;\\n}\\n```\\n\\n### \u6570\u7ec4\u8bbf\u95ee\u76f8\u5173\u6307\u4ee4\\n\\n\u6bd4\u8f83\u5e38\u89c4\u76f4\u63a5\uff0c\u4e0d\u8fc7\u6709\u4e2a\u7279\u6b8a\u70b9\uff1a\u6839\u636e\u89c4\u8303index\u53d8\u91cf\u53ef\u4ee5\u662fi4\u6216\u8005native int\u7c7b\u578b\u3002\u7531\u4e8e\u6570\u7ec4\u8bbf\u95ee\u662f\u975e\u5e38\u9891\u7e41\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u4e0d\u60f3\u63d2\u5165\u8fd0\u884c\u65f6\u6570\u636e\u7c7b\u578b\u7c7b\u578b\u53ca\u8f6c\u6362\uff0c\u56e0\u4e3a\u6211\u4eec\u6839\u636eindex\u53d8\u91cf\u7684size\u4e3a\u6bcf\u6761\u6570\u7ec4\u76f8\u5173\u6307\u4ee4\u8bbe\u8ba1\u4e862\u6761hybridclr\u6307\u4ee4\u3002\\n\\n\u4ee5ldelem.i4 \u6307\u4ee4\u7684index\u662fi4\u7c7b\u578b\u7684\u60c5\u5f62\u4e3a\u4f8b\\n\\n```cpp\\nstruct IRGetArrayElementVarVar_i4_4 : IRCommon\\n{\\n    uint16_t dst;\\n    uint16_t arr;\\n    uint16_t index;\\n};\\n\\n// \u5bf9\u5e94\u89e3\u91ca\u6267\u884c\u4ee3\u7801\\ncase HiOpcodeEnum::GetArrayElementVarVar_i4_4:\\n{\\n    uint16_t __dst = *(uint16_t*)(ip + 2);\\n    uint16_t __arr = *(uint16_t*)(ip + 4);\\n    uint16_t __index = *(uint16_t*)(ip + 6);\\n    Il2CppArray* arr = (*(Il2CppArray**)(localVarBase + __arr));\\n    CHECK_NOT_NULL_AND_ARRAY_BOUNDARY(arr, (*(int32_t*)(localVarBase + __index)));\\n    (*(int32_t*)(localVarBase + __dst)) = il2cpp_array_get(arr, int32_t, (*(int32_t*)(localVarBase + __index)));\\n    ip += 8;\\n    continue;\\n}  \\n```\\n\\n### \u51fd\u6570\u8c03\u7528\u6307\u4ee4\\n\\n\u76ee\u524d\u8c03\u7528AOT\u51fd\u6570\u548c\u8c03\u7528Interpreter\u51fd\u6570\u4f7f\u7528\u4e0d\u540c\u7684\u6307\u4ee4\uff0c\u56e0\u4e3aInterpreter\u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u590d\u7528\u5df2\u7ecf\u538b\u5230\u6808\u9876\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u5b8c\u5168\u4f18\u5316\u6389 Manged2Native -> Native2Managed \u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u63d0\u5347\u6027\u80fd\u3002\\n\\n\u8c03\u7528\u89e3\u91ca\u5668\u51fd\u6570\u65f6\u53ef\u4ee5\u590d\u7528\u5f53\u524d InterpreterModule::Execute\u51fd\u6570\u5e27\uff0c\u4e5f\u8282\u7701\u4e86\u51fd\u6570\u8c03\u7528\u5f00\u9500\uff0c\u540c\u65f6\u4e5f\u907f\u514d\u4e86\u89e3\u91ca\u5668\u5d4c\u5957\u8c03\u7528\u8fc7\u6df1\u5bfc\u81f4native\u6808overflow\u7684\u95ee\u9898\u3002\\n\\n\u5bf9\u4e8e\u5e26\u8fd4\u56de\u503c\u7684\u51fd\u6570\uff0c\u7531\u4e8e\u591a\u4e86\u4e00\u4e2a\u8fd4\u56de\u503c\u5730\u5740\u53c2\u6570ret\uff0c\u4e0e\u8fd4\u56devoid\u7684\u51fd\u6570\u5206\u522b\u8bbe\u8ba1\u4e86\u4e0d\u540c\u6307\u4ee4\u3002\\n\\n\u5982\u679c\u8c03\u7528\u7684\u662fAOT\u51fd\u6570\uff0c\u7531\u4e8e\u6bcf\u6761\u51fd\u6570\u7684\u53c2\u6570\u4e0d\u5b9a\uff0c\u6211\u4eec\u5c06\u53c2\u6570\u4fe1\u606f\u8bb0\u5f55\u5230resolvedDatas\uff0c\u7136\u540eargIdxs\u4e2d\u4fdd\u5b58\u8fd9\u4e2a\u95f4\u63a5\u7d22\u5f15\u3002\u53e6\u5916\u8fd8\u9700\u8981\u901a\u8fc7\u6865\u63a5\u51fd\u6570\u5b8c\u6210\u89e3\u91ca\u5668\u51fd\u6570\u53c2\u6570\u5230native abi\u51fd\u6570\u53c2\u6570\u7684\u8f6c\u6362\uff0c\u4e3a\u4e86\u907f\u514d\u8fd0\u884c\u65f6\u67e5\u627e\u7684\u5f00\u9500\uff0c\u4e5f\u63d0\u524d\u8ba1\u7b97\u4e86\u8fd9\u4e2a\u6865\u63a5\u51fd\u6570\uff0c\u8bb0\u5f55\u5230resolvedDatas\u4e2d\uff0c\u7136\u540e\u5728managed2NativeMethod\u4e2d\u4fdd\u5b58\u4e86\u8fd9\u4e2a\u95f4\u63a5\u7d22\u5f15\u3002\\n\\n\u4ee5call\u6307\u4ee4\u4e3a\u4f8b\uff0c\u4e3a\u5b83\u8bbe\u8ba1\u4e865\u6761\u6307\u4ee4\\n\\n- IRCallNative_void\\n- IRCallNative_ret\\n- IRCallNative_ret_expand\\n- IRCallInterp_void\\n- IRCallInterp_ret\\n\\n\u4ee5IRCallNative_ret\u7684\u5b9e\u73b0\u4e3a\u4f8b\uff0c\u4ecb\u7ecd\u8c03\u7528AOT\u51fd\u6570\u7684\u6307\u4ee4\uff1a\\n\\n```cpp\\n\\nstruct IRCallNative_ret : IRCommon\\n{\\n    uint16_t ret;\\n    uint32_t managed2NativeMethod;\\n    uint32_t methodInfo;\\n    uint32_t argIdxs;\\n};\\n\\n// \u5bf9\u5e94\u89e3\u91ca\u6267\u884c\u4ee3\u7801\\ncase HiOpcodeEnum::CallNative_ret:\\n{\\n    uint32_t __managed2NativeMethod = *(uint32_t*)(ip + 4);\\n    uint32_t __methodInfo = *(uint32_t*)(ip + 8);\\n    uint32_t __argIdxs = *(uint32_t*)(ip + 12);\\n    uint16_t __ret = *(uint16_t*)(ip + 2);\\n    void* _ret = (void*)(localVarBase + __ret);\\n    ((Managed2NativeCallMethod)imi->resolveDatas[__managed2NativeMethod])(((MethodInfo*)imi->resolveDatas[__methodInfo]), ((uint16_t*)&imi->resolveDatas[__argIdxs]), localVarBase, _ret);\\n    ip += 16;\\n    continue;\\n}\\n```\\n\\n\u5982\u679c\u8c03\u7528Interpreter\u51fd\u6570\uff0c\u7531\u4e8e\u51fd\u6570\u53c2\u6570\u5df2\u7ecf\u6309\u987a\u5e8f\u538b\u5230\u6808\u4e0a\uff0c\u53ea\u9700\u8981\u4e00\u4e2aargBase\u53c2\u6570\u6307\u5b9aarg0\u903b\u8f91\u5730\u5740\u5373\u53ef\uff0c\u4e0d\u9700\u8981\u501f\u52a9resolvedDatas\uff0c\u4e5f\u4e0d\u9700\u8981managed2NativeMethod\u6865\u63a5\u51fd\u6570\u6307\u9488\u3002\\n\u8fd9\u4e5f\u662f\u89e3\u91ca\u5668\u51fd\u6570\u4e0d\u53d7\u6865\u63a5\u51fd\u6570\u5f71\u54cd\u7684\u539f\u56e0\u3002\\n\\n\u4ee5IRCallInterp_ret\u4e3a\u4f8b\uff0c\u4ecb\u7ecd\u8c03\u7528Interpreter\u51fd\u6570\u7684\u6307\u4ee4\uff1a\\n\\n```cpp\\nstruct IRCallInterp_ret : IRCommon\\n{\\n    uint16_t argBase;\\n    uint16_t ret;\\n    uint8_t __pad6;\\n    uint8_t __pad7;\\n    uint32_t methodInfo;\\n};\\n\\n// \u5bf9\u5e94\u89e3\u91ca\u6267\u884c\u4ee3\u7801\\ncase HiOpcodeEnum::CallInterp_ret:\\n{\\n    MethodInfo* __methodInfo = *(MethodInfo**)(ip + 8);\\n    uint16_t __argBase = *(uint16_t*)(ip + 2);\\n    uint16_t __ret = *(uint16_t*)(ip + 4);\\n    CALL_INTERP_RET((ip + 16), __methodInfo, (StackObject*)(void*)(localVarBase + __argBase), (void*)(localVarBase + __ret));\\n    continue;\\n}\\n```\\n\\n### \u5f02\u5e38\u673a\u5236\u76f8\u5173\u6307\u4ee4\\n\\n\u5f02\u5e38\u673a\u5236\u76f8\u5173\u6307\u4ee4\u672c\u8eab\u4e0d\u590d\u6742\uff0c\u4f46\u5f02\u5e38\u5904\u7406\u673a\u5236\u975e\u5e38\u590d\u6742\u3002\\n\\n\u5f02\u5e38\u8fd9\u79cd\u7279\u6b8a\u7684\u6d41\u7a0b\u63a7\u5236\u6307\u4ee4\uff0c\u8ddf\u5206\u652f\u8df3\u8f6c\u6307\u4ee4\u76f8\u4f3c\uff0c\u539f\u59cb\u6307\u4ee4\u91cc\u5305\u542b\u4e86\u76f8\u5bf9offset\uff0c\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u6307\u4ee4\u8f6c\u6362\u65f6\u6211\u4eec\u6539\u6210int32_t\u7c7b\u578b\u7684\u7edd\u5bf9offset\u3002\\n\\n\u4ee5leave\u6307\u4ee4\u4e3a\u4f8b\\n\\n```cpp\\nstruct IRLeaveEx : IRCommon\\n{\\n    uint8_t __pad2;\\n    uint8_t __pad3;\\n    int32_t offset;\\n};\\n\\n// \u5bf9\u5e94\u89e3\u91ca\u6267\u884c\u4ee3\u7801\\ncase HiOpcodeEnum::LeaveEx:\\n{\\n    int32_t __offset = *(int32_t*)(ip + 4);\\n    LEAVE_EX(__offset);\\n    continue;\\n}\\n```\\n\\n### \u4e00\u4e9b\u989d\u5916\u7684instinct \u6307\u4ee4\\n\\n\u5bf9\u4e8e\u4e00\u4e9b\u7279\u522b\u5e38\u89c1\u7684\u51fd\u6570\uff0c\u4e3a\u4e86\u4f18\u5316\u6027\u80fd\uff0chybridclr\u76f4\u63a5\u5185\u7f6e\u4e86\u76f8\u5e94\u7684\u6307\u4ee4\uff0c\u4f8b\u5982 new Vector{2,3,4}\uff0c\u5982\u53ef\u7a7a\u53d8\u91cf\u76f8\u5173\u64cd\u4f5c\u3002\u8fd9\u4e9binstinct\u6307\u4ee4\u7684\u6267\u884c\u6027\u80fd\u57fa\u672c\u4e0eAOT\u6301\u5e73\u3002\\n\\n\u4ee5 new Vector3() \u4e3a\u4f8b\\n\\n```cpp\\n\\nstruct IRNewVector3_3 : IRCommon\\n{\\n    uint16_t obj;\\n    uint16_t x;\\n    uint16_t y;\\n    uint16_t z;\\n    uint8_t __pad10;\\n    uint8_t __pad11;\\n    uint8_t __pad12;\\n    uint8_t __pad13;\\n    uint8_t __pad14;\\n    uint8_t __pad15;\\n};\\n\\n// \u5bf9\u5e94\u89e3\u91ca\u6267\u884c\u4ee3\u7801\\ncase HiOpcodeEnum::NewVector3_3:\\n{\\n    uint16_t __obj = *(uint16_t*)(ip + 2);\\n    uint16_t __x = *(uint16_t*)(ip + 4);\\n    uint16_t __y = *(uint16_t*)(ip + 6);\\n    uint16_t __z = *(uint16_t*)(ip + 8);\\n    *(HtVector3f*)(*(void**)(localVarBase + __obj)) = {(*(float*)(localVarBase + __x)), (*(float*)(localVarBase + __y)), (*(float*)(localVarBase + __z))};\\n    ip += 16;\\n    continue;\\n}\\n```\\n\\n### InitOnce \u6307\u4ee4\\n\\n\u6709\u4e00\u4e9b\u6307\u4ee4\uff08\u5982ldsfld\uff09\u7b2c\u4e00\u6b21\u6267\u884c\u7684\u65f6\u5019\u9700\u8981\u8fdb\u884c\u521d\u59cb\u5316\u64cd\u4f5c\uff0c\u4f46\u540e\u7eed\u518d\u6b21\u6267\u884c\u65f6\uff0c\u4e0d\u9700\u8981\u518d\u6267\u884c\u521d\u59cb\u5316\u64cd\u4f5c\u3002\u4f46\u5373\u4f7f\u8fd9\u6837\uff0c\u514d\u4e0d\u4e86\u4e00\u4e2a\u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u521d\u59cb\u5316\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u5e0c\u671b\u5b8c\u5168\u4f18\u5316\u6389\u8fd9\u4e2a\u68c0\u67e5\u884c\u4e3a\u3002InitOnce\u52a8\u6001JIT\u6280\u672f\u7528\u4e8e\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\\n\\nInitOnce\u662fhybridclr\u7684\u4e13\u5229\u6280\u672f\uff0c\u6682\u672a\u5728\u4ee3\u7801\u4e2d\u5b9e\u73b0\uff0c\u8fd9\u513f\u4e0d\u8be6\u7ec6\u4ecb\u7ecd\u3002\\n\\n### \u5176\u4ed6\u6280\u672f\u76f8\u5173\u6307\u4ee4\\n\\n\u9650\u4e8e\u7bc7\u5e45\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u6307\u4ee4\uff0c\u4f1a\u5728\u5355\u72ec\u7684\u6587\u7ae0\u4e2d\u4ecb\u7ecd\\n\\n## \u603b\u7ed3\\n\\n\u81f3\u6b64\u6211\u4eec\u5b8c\u6210hybridclr\u6307\u4ee4\u96c6\u5b9e\u73b0\u76f8\u5173\u4ecb\u7ecd\u3002"},{"id":"principle","metadata":{"permalink":"/blog/principle","source":"@site/blog/2022-07-13-principle.md","title":"hybridclr\u6280\u672f\u539f\u7406\u5256\u6790","description":"\u6211\u4eec\u5728\u4e0a\u4e00\u8282\u5b8c\u6210\u4e86hybridclr\u53ef\u884c\u6027\u5206\u6790\u3002\u7531\u4e8ehybridclr\u5185\u5bb9\u6781\u591a\uff0c\u9650\u4e8e\u7bc7\u5e45\u672c\u7bc7\u6587\u7ae0\u4e3b\u8981\u6982\u8ff0\u6027\u4ecb\u7ecdhybridclr\u7684\u6280\u672f\u5b9e\u73b0\u3002","date":"2022-07-13T00:00:00.000Z","formattedDate":"2022\u5e747\u670813\u65e5","tags":[],"readingTime":22.81,"hasTruncateMarker":false,"authors":[{"name":"walon"}],"frontMatter":{"slug":"principle","authors":{"name":"walon"}},"prevItem":{"title":"hybridclr\u6307\u4ee4\u96c6\u8bbe\u8ba1","permalink":"/blog/instructions"},"nextItem":{"title":"\u5173\u4e8ehybridclr\u53ef\u884c\u6027\u7684\u601d\u7ef4\u5b9e\u9a8c","permalink":"/blog/mindexperiment"}},"content":"\u6211\u4eec\u5728\u4e0a\u4e00\u8282\u5b8c\u6210\u4e86hybridclr\u53ef\u884c\u6027\u5206\u6790\u3002\u7531\u4e8ehybridclr\u5185\u5bb9\u6781\u591a\uff0c\u9650\u4e8e\u7bc7\u5e45\u672c\u7bc7\u6587\u7ae0\u4e3b\u8981\u6982\u8ff0\u6027\u4ecb\u7ecdhybridclr\u7684\u6280\u672f\u5b9e\u73b0\u3002\\n\\n## CLR\u548cil2cpp\u57fa\u7840\\n\\n\u7ed9\u7eafAOT\u7684il2cpp\u8fd0\u884c\u65f6\u6dfb\u52a0\u4e00\u4e2a\u539f\u751finterpreter\u6a21\u5757\uff0c\u6700\u7ec8\u5b9e\u73b0[hybrid mode execution](https://developpaper.com/new-net-interpreter-mono-has-arrived/)\uff0c\u8fd9\u770b\u8d77\u6765\u662f\u975e\u5e38\u590d\u6742\u7684\u4e8b\u60c5\u3002\\n\\n\u5176\u5b9e\u4e0d\u7136\uff0c\u7a0b\u5e8f\u4e0d\u5916\u4e4e\u4ee3\u7801+\u6570\u636e\u3002CLR\u8fd0\u884c\u4e2d\u505a\u7684\u4e8b\u60c5\uff0c\u7efc\u5408\u8d77\u6765\u4e3b\u8981\u5c31\u51e0\u79cd\uff1a\\n\\n1. \u6267\u884c\u7b80\u5355\u7684\u5185\u5b58\u64cd\u4f5c\u6216\u8005\u8ba1\u7b97\u6216\u8005\u903b\u8f91\u8df3\u8f6c\u3002\u8fd9\u90e8\u5206\u4e0eCLI\u7684Base\u6307\u4ee4\u96c6\u5927\u81f4\u5bf9\u5e94\\n2. \u6267\u884c\u4e00\u4e2a\u4f9d\u8d56\u4e8e\u5143\u6570\u636e\u4fe1\u606f\u7684\u57fa\u7840\u64cd\u4f5c\u3002\u4f8b\u5982 `a.x, arr[3]` \u8fd9\u79cd\uff0c\u4f9d\u8d56\u4e8e\u5143\u6570\u636e\u4fe1\u606f\u624d\u80fd\u6b63\u786e\u5de5\u4f5c\u7684\u4ee3\u7801\u3002\u5bf9\u5e94\u90e8\u5206CLI\u7684Object Model\u6307\u4ee4\u96c6\u3002\\n3. \u6267\u884c\u4e00\u4e2a\u4f9d\u8d56\u5143\u6570\u636e\u7684\u8f83\u590d\u6742\u7684\u64cd\u4f5c\u3002\u5982 `typeof(object)\uff0ca is string\u3001(object)5` \u8fd9\u79cd\u4f9d\u8d56\u4e8e\u8fd0\u884c\u65f6\u63d0\u4f9b\u7684\u51fd\u6570\u53ca\u76f8\u5e94\u5143\u6570\u636e\u624d\u6b63\u786e\u5de5\u4f5c\u7684\u4ee3\u7801\u3002\u5bf9\u5e94\u90e8\u5206CLI\u7684Object Model\u6307\u4ee4\u96c6\u3002\\n4. \u51fd\u6570\u8c03\u7528\u3002\u5305\u62ec\u4e14\u4e0d\u9650\u4e8e\u88abAOT\u51fd\u6570\u8c03\u7528\u53ca\u8c03\u7528AOT\u51fd\u6570\uff0c\u53cainterpreter\u4e4b\u95f4\u7684\u51fd\u6570\u8c03\u7528\u3002\u5bf9\u5e94CLI\u6307\u4ee4\u96c6\u4e2d\u7684 `call\u3001callvir\u3001newobj` \u7b49Object Model\u6307\u4ee4\u3002\\n\\n\u5982\u679c\u5bf9CLR\u6709\u6df1\u5165\u7684\u4e86\u89e3\u548c\u900f\u5f7b\u7684\u5206\u6790\uff0c\u4e3a\u4e86\u5b9e\u73b0`hybrid mode execution`\uff0chybridclr\u6838\u5fc3\u8981\u5b8c\u6210\u7684\u5c31\u4ee5\u4e0b\u4e24\u4ef6\u4e8b\uff0c\u5176\u4ed6\u5219\u662f\u65e0\u788d\u5168\u5c40\u7684\u7ec6\u8282\uff1a\\n\\n- assembly\u4fe1\u606f\u80fd\u591f\u52a0\u8f7d\u548c\u6ce8\u518c\u3002 \u5728\u6b64\u57fa\u7840\u53ef\u4ee5\u5b9e\u73b0 `1-3`\u3002\\n- \u786e\u4fddinterpreter\u51fd\u6570\u80fd\u88ab\u627e\u5230\u5e76\u4e14\u88ab\u8c03\u7528\uff0c\u5e76\u4e14\u80fd\u6267\u884c\u51fa\u6b63\u786e\u7684\u7ed3\u679c\u3002\u5219\u53ef\u4ee5\u5b9e\u73b0 `4`\u3002\\n\\n\u7531\u4e8e\u5f7b\u5e95\u7406\u89e3\u4ee5\u4e0a\u5185\u5bb9\u9700\u8981\u8f83\u4e30\u5bcc\u7684\u5bf9CLR\u7684\u8ba4\u77e5\u4ee5\u53ca\u8f83\u5f3a\u7684\u6d1e\u5bdf\u529b\uff0c\u6211\u4eec\u4e0d\u518d\u8d39\u53e3\u820c\u89e3\u91ca\uff0c\u4e0d\u80fd\u7406\u89e3\u7684\u5f00\u53d1\u8005\u4e0d\u5fc5\u6df1\u7a76\uff0c\u7ee7\u7eed\u770b\u540e\u7eed\u7ae0\u8282\u3002\\n\\n## \u6838\u5fc3\u6a21\u5757\\n\\n\u4ece\u529f\u80fd\u6765\u770b\u5305\u542b\u4ee5\u4e0b\u6838\u5fc3\u90e8\u5206\uff1a\\n\\n- metadata\u521d\u7ea7\u89e3\u6790\\n- metadata\u9ad8\u7ea7\u5143\u6570\u636e\u7ed3\u6784\u89e3\u6790\\n- metadata\u52a8\u6001\u6ce8\u518c\\n- \u5bc4\u5b58\u5668\u6307\u4ee4\u96c6\u8bbe\u8ba1\\n- IL\u6307\u4ee4\u96c6\u5230hybridclr\u5bc4\u5b58\u5668\u6307\u4ee4\u96c6\u7684\u8f6c\u6362\\n- \u89e3\u91ca\u6267\u884chybridclr\u6307\u4ee4\u96c6\\n- \u5176\u4ed6\u5982GC\u3001\u591a\u7ebf\u7a0b\u76f8\u5173\u5904\u7406\\n\\n\u4ece\u4ee3\u7801\u7ed3\u6784\u6765\u770b\u5305\u542b\u4e09\u4e2a\u76ee\u5f55\uff1a\\n\\n- metadata \u5143\u6570\u636e\u76f8\u5173\\n- transform \u6307\u4ee4\u96c6\u8f6c\u6362\u76f8\u5173\\n- interpreter \u89e3\u91ca\u5668\u76f8\u5173\\n\\n## metadata \u521d\u7ea7\u89e3\u6790\\n\\n\u8fd9\u90e8\u5206\u5185\u5bb9\u6280\u672f\u95e8\u69db\u4e0d\u9ad8\uff0c\u4f46\u6bd4\u8f83\u7410\u788e\u548c\u8f9b\u82e6\uff0c\u5fe0\u5b9e\u5730\u6309\u7167 [ECMA-335\u89c4\u8303](https://www.ecma-international.org/publications-and-standards/standards/ecma-335/) \u7684\u6587\u6863\u5b9e\u73b0\u5373\u53ef\u3002\u5bf9\u4e8e\u5c11\u91cf\u6709\u7591\u60d1\u7684\u5730\u65b9\uff0c\u53ef\u4ee5\u7f51\u4e0a\u7684\u8d44\u6599\u6216\u8005\u501f\u9274mono\u7684\u4ee3\u7801\u3002\\n\\n\u76f8\u5173\u4ee3\u7801\u5728`hybridclr\\\\metadata`\u76ee\u5f55\uff0c\u4e3b\u8981\u5728RawImage.h\u548cRawImage.cpp\u4e2d\u5b9e\u73b0\u3002\u5982\u679c\u518d\u7ec6\u5206\uff0c\u76f8\u5173\u5b9e\u73b0\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\u3002\\n\\n### PE \u6587\u4ef6\u7ed3\u6784\u89e3\u6790\\n\\nmanaged dll\u6269\u5c55\u4e86PE\u6587\u4ef6\u7ed3\u6784\uff0c\u589e\u52a0\u4e86CLI\u76f8\u5173metadata\u90e8\u5206\u3002\u8fd9\u73af\u8282\u7684\u4e3b\u8981\u5de5\u4f5c\u6709\uff1a\\n\\n- \u89e3\u6790PE headers\\n- \u89e3\u6790 section headers\uff0c\u627e\u51faCLI header\uff0c\u5b9a\u4f4d\u51facli\u6570\u636e\u6bb5\\n- \u89e3\u6790\u51fa\u6240\u6709stream\u3002Stream\u662fCLI\u4e2d\u6700\u5e95\u5c42\u7684\u6570\u636e\u7ed3\u6784\u4e4b\u4e00\uff0cCLI\u5c06\u5143\u6570\u636e\u6839\u636e\u7279\u6027\u5206\u4e3a\u51e0\u4e2a\u5927\u7c7b\\n  - #~ \u6d41\u3002\u5305\u542b\u6240\u6709tables\u5b9a\u4e49\uff0c\u662f\u6700\u6838\u5fc3\u7684\u5143\u6570\u636e\u7ed3\u6784\\n  - #Strings \u6d41\u3002\u5305\u62ec\u4ee3\u7801\u4e2d\u975e\u6587\u6863\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\uff0c\u5982\u7c7b\u578b\u540d\u3001\u5b57\u6bb5\u540d\u7b49\u7b49\\n  - #GUID \u6d41\\n  - #Blob \u6d41\u3002\u4e00\u4e9b\u5143\u6570\u636e\u7c7b\u578b\u8fc7\u4e8e\u590d\u6742\uff0c\u4ee5blob\u683c\u5f0f\u4fdd\u5b58\u3002\u8fd8\u6709\u4e00\u4e9b\u6570\u636e\u5982\u6570\u7ec4\u521d\u59cb\u5316\u6570\u636e\u5217\u8868\uff0c\u4e5f\u5e38\u5e38\u4fdd\u5b58\u5230Blob\u6d41\u3002\\n  - #- \u6d41\\n  - #Pdb \u6d41\u3002\u7528\u4e8e\u8c03\u8bd5\\n\\n\u89e3\u6790PE\u6587\u4ef6\u548c\u4ee3\u7801\u5728RawImage::Load\uff0c\u89e3\u6790stream\u5bf9\u5e94\u7684\u4ee3\u7801\u5728RawImage::LoadStreams\u3002\\n\\n### tables metadata \u89e3\u6790\\n\\nCLI\u4e2d\u5927\u591a\u6570metadata\u88ab\u4e3a\u51e0\u5341\u79cd\u7c7b\u578b\uff0c\u6bcf\u4e2a\u7c7b\u578b\u7684\u6570\u636e\u7ec4\u7ec7\u6210\u4e00\u4e2atable\u3002\u5bf9\u4e8e\u6bcf\u4e2atable\uff0c\u6bcf\u884c\u8bb0\u5f55\u90fd\u662f\u76f8\u540c\u5927\u5c0f\u3002\\n\\n\u521d\u7ea7\u89e3\u6790\u4e2d\u4e0d\u89e3\u6790table\u4e2d\u6bcf\u884c\u8bb0\u5f55\uff0c\u53ea\u89e3\u6790table\u7684\u6bcf\u884c\u8bb0\u5f55\u5927\u5c0f\u548c\u6bcf\u4e2a\u5b57\u6bb5\u504f\u79fb\u3002\u6709\u4e00\u5927\u7c7b\u5b57\u6bb5\u4e3aCoded Index\u7c7b\u578b\uff0c\u6709\u53ef\u80fd\u662f2\u62164\u5b57\u8282\uff0c\u5e76\u4e0d\u56fa\u5b9a\uff0c\u9700\u8981\u6839\u636e\u5176\u4ed6\u8868\u7684Row Count\u6765\u51b3\u5b9atable\u4e2d\u8fd9\u4e00\u5217\u7684\u5b57\u6bb5\u5927\u5c0f\u3002\u7531\u4e8etable\u5f88\u591a\uff0c\u8fd9\u4e2a\u8ba1\u7b97\u8fc7\u7a0b\u6bd4\u8f83\u7410\u788e\u6613\u9519\u3002\\n\\n\u5bf9\u5e94\u4ee3\u7801\u5728RawImage::LoadTables\uff0c\u622a\u53d6\u90e8\u5206\u4ee3\u7801\u5982\u4e0b\\n\\n```cpp\\nvoid RawImage::BuildTableRowMetas()\\n{\\n    {\\n        auto& table = _tableRowMetas[(int)TableType::MODULE];\\n        table.push_back({ 2 });\\n        table.push_back({ ComputStringIndexByte() });\\n        table.push_back({ ComputGUIDIndexByte() });\\n        table.push_back({ ComputGUIDIndexByte() });\\n        table.push_back({ ComputGUIDIndexByte() });\\n    }\\n    {\\n        auto& table = _tableRowMetas[(int)TableType::TYPEREF];\\n        table.push_back({ ComputTableIndexByte(TableType::MODULE, TableType::MODULEREF, TableType::ASSEMBLYREF, TableType::TYPEREF, TagBits::ResoulutionScope) });\\n        table.push_back({ ComputStringIndexByte() });\\n        table.push_back({ ComputStringIndexByte() });\\n    }\\n\\n    // ... \u5176\u4ed6\\n}\\n\\n```\\n\\n### table \u89e3\u6790\\n\\n\u4e0a\u4e00\u8282\u5df2\u7ecf\u89e3\u6790\u51fa\u6bcf\u4e2atable\u7684\u8d77\u59cb\u6570\u636e\u4f4d\u7f6e\u3001row count\u3001\u8868\u4e2d\u6bcf\u4e2a\u5b57\u6bb5\u7684\u504f\u79fb\u548c\u5927\u5c0f\uff0c\u6709\u8db3\u591f\u7684\u4fe1\u606f\u53ef\u4ee5\u89e3\u6790\u51fa\u6bcf\u4e2atable\u4e2d\u4efb\u610frow\u7684\u6570\u636e\u3002table\u4e2drow\u7684id\u4ece1\u5f00\u59cb\u3002\\n\\n\u6bcf\u4e2atable\u7684row\u7684\u89e3\u6790\u65b9\u5f0f\u6839\u636eECMA\u89c4\u8303\u5b9e\u73b0\u5373\u53ef\u3002\u6bcf\u4e2atable\u7684row\u5b9a\u4e49\u5728 `metadata\\\\Coff.h`\u6587\u4ef6\uff0cRow\u89e3\u6790\u4ee3\u7801\u5728 `RawImage.h`\u3002\u8fd9\u4e9b\u89e3\u6790\u4ee3\u7801\u90fd\u975e\u5e38\u76f8\u4f3c\uff0c\u4e3a\u4e86\u907f\u514d\u9519\u8bef\uff0c\u4f7f\u7528\u4e86\u5927\u91cf\u7684\u5b8f\uff0c\u622a\u53d6\u90e8\u5206\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```cpp\\nTABLE2(GenericParamConstraint, TableType::GENERICPARAMCONSTRAINT, owner, constraint)\\nTABLE3(MemberRef, TableType::MEMBERREF, classIdx, name, signature)\\nTABLE1(StandAloneSig, TableType::STANDALONESIG, signature)\\nTABLE3(MethodImpl, TableType::METHODIMPL, classIdx, methodBody, methodDeclaration)\\nTABLE2(FieldRVA, TableType::FIELDRVA, rva, field)\\nTABLE2(FieldLayout, TableType::FIELDLAYOUT, offset, field)\\nTABLE3(Constant, TableType::CONSTANT, type, parent, value)\\nTABLE2(MethodSpec, TableType::METHODSPEC, method, instantiation)\\nTABLE3(CustomAttribute, TableType::CUSTOMATTRIBUTE, parent, type, value)\\n\\n```\\n\\n## metadata\u9ad8\u7ea7\u5143\u6570\u636e\u7ed3\u6784\u89e3\u6790\\n\\n\u4ecetables\u91cc\u76f4\u63a5\u8bfb\u51fa\u6765\u7684\u90fd\u662f\u6301\u4e45\u5316\u7684\u521d\u59cbmetadata\uff0c\u800c\u8fd0\u884c\u65f6\u9700\u8981\u7684\u4e0d\u53ea\u662f\u8fd9\u4e9b\u7b80\u5355\u539f\u59cb\u6570\u636e\uff0c\u7ecf\u5e38\u9700\u8981\u8fdb\u4e00\u6b65resolve\u540e\u7684\u6570\u636e\u3002\u4f8b\u5982\\n\\n- Il2CppType \u3002\u5373\u53ef\u4ee5\u662f\u7b80\u5355\u7684 `int`\uff0c\u4e5f\u53ef\u4ee5\u662f\u6bd4\u8f83\u590d\u6742\u7684`List<int>`\uff0c\u751a\u81f3\u662f\u7279\u522b\u590d\u6742\u7684`List<(int,int)>&`\\n- MethodInfo \u3002 \u5373\u53ef\u4ee5\u662f\u7b80\u5355\u7684`object.ToString`\uff0c\u4e5f\u6709\u590d\u6742\u7684\u6cdb\u578b `IEnumerator<int>.Count`\u3002\\n\\nCLI\u7684\u6cdb\u578b\u673a\u5236\u5bfc\u81f4\u5143\u6570\u636e\u53d8\u5f97\u6781\u5176\u590d\u6742\uff0c\u5178\u578b\u7684\u662fTypeSpec\uff0cMethodSpec\uff0cMemberSpec\u76f8\u5173\u5143\u6570\u636e\u7684\u8fd0\u884c\u65f6\u89e3\u6790\u3002\u6838\u5fc3\u5b9e\u73b0\u4ee3\u7801\u5728Image.cpp\u4e2d\u5b9e\u73b0\uff0c\u5269\u4f59\u4e00\u90e8\u5206\u5728 InterpreterImage.cpp\u53caAOTHomologousImage.cpp\u4e2d\u5b9e\u73b0\u3002\u540e\u9762\u4f1a\u6709\u4e13\u95e8\u4ecb\u7ecd\u3002\\n\\n## metadata\u52a8\u6001\u6ce8\u518c\\n\\n\u6839\u636e\u7c92\u5ea6\u4ece\u5927\u5230\u5c0f\uff0c\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u7c7b\\n\\n- Assembly \u6ce8\u518c\u3002\u5373\u5c06\u52a0\u8f7d\u7684assembly\u6ce8\u518c\u5230il2cpp\u7684\u5143\u6570\u636e\u7ba1\u7406\u4e2d\u3002\\n- TypeDefinition \u6ce8\u518c\u3002 \u8fd9\u4e00\u6b65\u4f1a\u751f\u6210\u57fa\u7840\u8fd0\u884c\u65f6\u7c7b\u578b Il2CppClass\u3002\\n- VTable\u865a\u8868\u8ba1\u7b97\u3002 \u7531\u4e8eil2cpp\u7684\u865a\u8868\u8ba1\u7b97\u662f\u4e2a\u9ed1\u76d2\uff0c\u5185\u90e8\u76f8\u5f53\u590d\u6742\uff0c\u6211\u4eec\u8d39\u4e86\u5f88\u591a\u529f\u592b\u624d\u7814\u7a76\u660e\u767d\u5b83\u7684\u8ba1\u7b97\u673a\u5236\u3002\u540e\u9762\u4f1a\u6709\u4e13\u95e8\u7ae0\u8282\u4ecb\u7ecdVTable\u8ba1\u7b97\uff0c\u8fd9\u513f\u4e0d\u518d\u8d58\u8ff0\u3002\\n- \u5176\u4ed6\u5143\u6570\u636e\uff0c\u5982CustomAttribute\u8ba1\u7b97\u7b49\u7b49\u3002\\n\\n### Assembly \u6ce8\u518c\\n\\nAssembly\u52a0\u8f7d\u7684\u5173\u952e\u51fd\u6570\u5728 il2cpp::vm::MetadataCache::LoadAssemblyFromBytes \u3002\u7531\u4e8eil2cpp\u662fAOT\u8fd0\u884c\u65f6\uff0c\u539f\u59cb\u5b9e\u73b0\u53ea\u662f\u7b80\u5355\u5730\u629b\u51fa\u5f02\u5e38\u3002\u6211\u4eec\u4fee\u6539\u548c\u5b8c\u5584\u4e86\u5b9e\u73b0\uff0c\u5728\u5176\u4e2d\u8c03\u7528\u4e86hybridclr::metadata::Assembly::LoadFromBytes\uff0c\u5b8c\u6210\u4e86Assembly\u7684\u521b\u5efa\uff0c\u7136\u540e\u518d\u6ce8\u518c\u5230\u5168\u5c40Assemblies\u5217\u8868\u3002\u76f8\u5173\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a\\n\\n```cpp\\nconst Il2CppAssembly* il2cpp::vm::MetadataCache::LoadAssemblyFromBytes(const char* assemblyBytes, size_t length)\\n{\\n    il2cpp::os::FastAutoLock lock(&il2cpp::vm::g_MetadataLock);\\n\\n    Il2CppAssembly* newAssembly = hybridclr::metadata::Assembly::LoadFromBytes(assemblyBytes, length, true);\\n    if (newAssembly)\\n    {\\n        // avoid register placeholder assembly twicely.\\n        for (Il2CppAssembly* ass : s_cliAssemblies)\\n        {\\n            if (ass == newAssembly)\\n            {\\n                return ass;\\n            }\\n        }\\n        il2cpp::vm::Assembly::Register(newAssembly);\\n        s_cliAssemblies.push_back(newAssembly);\\n        return newAssembly;\\n    }\\n\\n    return nullptr;\\n}\\n```\\n\\n### TypeDefinition \u6ce8\u518c\\n\\nAssembly\u4f7f\u7528\u4e86\u5ef6\u8fdf\u521d\u59cb\u5316\u65b9\u5f0f\uff0c\u6ce8\u518c\u540eAssembly\u4e2d\u7684\u7c7b\u578b\u4fe1\u606f\u5e76\u672a\u521b\u5efa\u76f8\u5e94\u7684\u8fd0\u884c\u65f6metadata Il2CppClass\uff0c\u53ea\u6709\u5f53\u7b2c\u4e00\u6b21\u8bbf\u95ee\u5230\u8be5\u7c7b\u578b\u65f6\u624d\u8fdb\u884c\u521d\u59cb\u5316\u3002\\n\\n\u7531\u4e8e\u4ea4\u53c9\u4f9d\u8d56\u4ee5\u53ca\u4e3a\u4e86\u4f18\u5316\u6027\u80fd\uff0cIl2Class\u7684\u521b\u5efa\u662f\u4e2a\u5206\u6b65\u8fc7\u7a0b\\n\\n- Il2CppClass \u57fa\u7840\u521b\u5efa\\n- Il2CppClass\u7684\u5b50\u5143\u6570\u636e\u5ef6\u8fdf\u521d\u59cb\u5316\\n- \u8fd0\u884c\u65f6Class\u521d\u59cb\u5316\\n\\n#### Il2CppClass\u57fa\u7840\u521b\u5efa\\n\\n\u5728\u4e0a\u4e00\u8282\u52a0\u8f7dAssembly\u65f6\u5df2\u7ecf\u521b\u5efa\u597d\u6240\u6709\u7c7b\u578b\u5bf9\u5e94\u7684\u5b9a\u4e49\u6570\u636eIl2CppTypeDefinition\uff0c\u5728 il2cpp::vm::GlobalMetadata::FromTypeDefinition \u4e2d\u5b8c\u6210Il2CppClass\u521b\u5efa\u5de5\u4f5c\u3002\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```cpp\\nIl2CppClass* il2cpp::vm::GlobalMetadata::FromTypeDefinition(TypeDefinitionIndex index)\\n{\\n    /// ... \u7701\u7565\u5176\u4ed6\\n    Il2CppClass* typeInfo = (Il2CppClass*)IL2CPP_CALLOC(1, sizeof(Il2CppClass) + (sizeof(VirtualInvokeData) * typeDefinition->vtable_count));\\n    typeInfo->klass = typeInfo;\\n    typeInfo->image = GetImageForTypeDefinitionIndex(index);\\n    typeInfo->name = il2cpp::vm::GlobalMetadata::GetStringFromIndex(typeDefinition->nameIndex);\\n    typeInfo->namespaze = il2cpp::vm::GlobalMetadata::GetStringFromIndex(typeDefinition->namespaceIndex);\\n    typeInfo->byval_arg = *il2cpp::vm::GlobalMetadata::GetIl2CppTypeFromIndex(typeDefinition->byvalTypeIndex);\\n    typeInfo->this_arg = typeInfo->byval_arg;\\n    typeInfo->this_arg.byref = true;\\n    typeInfo->typeMetadataHandle = reinterpret_cast<const Il2CppMetadataTypeHandle>(typeDefinition);\\n    typeInfo->genericContainerHandle = GetGenericContainerFromIndex(typeDefinition->genericContainerIndex);\\n    typeInfo->instance_size = typeDefinitionSizes->instance_size;\\n    typeInfo->actualSize = typeDefinitionSizes->instance_size;     // actualySize is instance_size for compiler generated values\\n    typeInfo->native_size = typeDefinitionSizes->native_size;\\n    typeInfo->static_fields_size = typeDefinitionSizes->static_fields_size;\\n    typeInfo->thread_static_fields_size = typeDefinitionSizes->thread_static_fields_size;\\n    typeInfo->thread_static_fields_offset = -1;\\n    typeInfo->flags = typeDefinition->flags;\\n    typeInfo->valuetype = (typeDefinition->bitfield >> (kBitIsValueType - 1)) & 0x1;\\n    typeInfo->enumtype = (typeDefinition->bitfield >> (kBitIsEnum - 1)) & 0x1;\\n    typeInfo->is_generic = typeDefinition->genericContainerIndex != kGenericContainerIndexInvalid;     // generic if we have a generic container\\n    typeInfo->has_finalize = (typeDefinition->bitfield >> (kBitHasFinalizer - 1)) & 0x1;\\n    typeInfo->has_cctor = (typeDefinition->bitfield >> (kBitHasStaticConstructor - 1)) & 0x1;\\n    typeInfo->is_blittable = (typeDefinition->bitfield >> (kBitIsBlittable - 1)) & 0x1;\\n    typeInfo->is_import_or_windows_runtime = (typeDefinition->bitfield >> (kBitIsImportOrWindowsRuntime - 1)) & 0x1;\\n    typeInfo->packingSize = ConvertPackingSizeEnumToValue(static_cast<PackingSize>((typeDefinition->bitfield >> (kPackingSize - 1)) & 0xF));\\n    typeInfo->method_count = typeDefinition->method_count;\\n    typeInfo->property_count = typeDefinition->property_count;\\n    typeInfo->field_count = typeDefinition->field_count;\\n    typeInfo->event_count = typeDefinition->event_count;\\n    typeInfo->nested_type_count = typeDefinition->nested_type_count;\\n    typeInfo->vtable_count = typeDefinition->vtable_count;\\n    typeInfo->interfaces_count = typeDefinition->interfaces_count;\\n    typeInfo->interface_offsets_count = typeDefinition->interface_offsets_count;\\n    typeInfo->token = typeDefinition->token;\\n    typeInfo->interopData = il2cpp::vm::MetadataCache::GetInteropDataForType(&typeInfo->byval_arg);\\n\\n    // \u7701\u7565\u5176\u4ed6\\n\\n    return typeInfo;\\n}\\n```\\n\\n\u53ef\u4ee5\u770b\u5230TypeDefinition\u4e2d\u5b57\u6bb5\u76f8\u5f53\u591a\uff0c\u8fd9\u4e9b\u90fd\u662f\u5728Assembly\u52a0\u8f7d\u73af\u8282\u8ba1\u7b97\u597d\u7684\u3002\\n\\n#### Il2CppClass\u7684\u5b50metadata\u5ef6\u8fdf\u521d\u59cb\u5316\\n\\n\u7531\u4e8e\u4ea4\u4e92\u4f9d\u8d56\u4ee5\u53ca\u4e3a\u4e86\u4f18\u5316\u6027\u80fd\uff0cIl2Class\u7684\u5b50metadata\u6570\u636e\u4f7f\u7528\u4e86\u5ef6\u8fdf\u521d\u59cb\u5316\u7b56\u7565\uff0c\u5206\u6b65\u8fdb\u884c\uff0c\u5728\u7b2c\u4e00\u6b21\u4f7f\u7528\u65f6\u624d\u521d\u59cb\u5316\u3002\u4ee5\u4e0b\u4ee3\u7801\u622a\u53d6\u81ea `Class.h` \u6587\u4ef6\uff1a\\n\\n```cpp\\nclass Class\\n{\\n    // ... \u5176\u4ed6\u4ee3\u7801\\n    static bool Init(Il2CppClass *klass);\\n\\n    static void SetupEvents(Il2CppClass *klass);\\n    static void SetupFields(Il2CppClass *klass);\\n    static void SetupMethods(Il2CppClass *klass);\\n    static void SetupNestedTypes(Il2CppClass *klass);\\n    static void SetupProperties(Il2CppClass *klass);\\n    static void SetupTypeHierarchy(Il2CppClass *klass);\\n    static void SetupInterfaces(Il2CppClass *klass);\\n    // ... \u5176\u4ed6\u4ee3\u7801\\n};\\n\\n```\\n\\n\u91cd\u70b9\u6765\u4e86\uff01\uff01\uff01\u51fd\u6570metadata\u7684\u6267\u884c\u6307\u9488\u7684\u7ed1\u5b9a\u5728SetupMethods\u51fd\u6570\u4e2d\u5b8c\u6210\uff0c\u5176\u4e2d\u5173\u952e\u4ee3\u7801\u7247\u6bb5\u5982\u4e0b\uff1a\\n\\n```cpp\\nvoid SetupMethodsLocked(Il2CppClass *klass, const il2cpp::os::FastAutoLock& lock)\\n{\\n    /// ... \u5176\u4ed6\u5ffd\u7565\u7684\u4ee3\u7801\\n    for (MethodIndex index = 0; index < end; ++index)\\n    {\\n        Il2CppMetadataMethodInfo methodInfo = MetadataCache::GetMethodInfo(klass, index);\\n\\n        newMethod->name = methodInfo.name;\\n\\n        if (klass->valuetype)\\n        {\\n            Il2CppMethodPointer adjustorThunk = MetadataCache::GetAdjustorThunk(klass->image, methodInfo.token);\\n            if (adjustorThunk != NULL)\\n                newMethod->methodPointer = adjustorThunk;\\n        }\\n\\n        // We did not find an adjustor thunk, or maybe did not need to look for one. Let\'s get the real method pointer.\\n        if (newMethod->methodPointer == NULL)\\n            newMethod->methodPointer = MetadataCache::GetMethodPointer(klass->image, methodInfo.token);\\n\\n        newMethod->invoker_method = MetadataCache::GetMethodInvoker(klass->image, methodInfo.token);\\n    }\\n    /// ... \u5176\u4ed6\u5ffd\u7565\u7684\u4ee3\u7801\\n}\\n```\\n\\n\u51fd\u6570\u8fd0\u884c\u65f6\u5143\u6570\u636e\u7ed3\u6784\u4e3a MethodInfo\uff0c\u5b9a\u4e49\u5982\u4e0b,\\n\\n```cpp\\ntypedef struct MethodInfo\\n{\\n    Il2CppMethodPointer methodPointer;\\n    InvokerMethod invoker_method;\\n    const char* name;\\n    Il2CppClass *klass;\\n    const Il2CppType *return_type;\\n    const ParameterInfo* parameters;\\n\\n    // ... \u7701\u7565\u5176\u4ed6\\n} MethodInfo;\\n\\n```\\n\\n\u5176\u4e2d\u6211\u4eec\u6bd4\u8f83\u5173\u5fc3\u7684\u662fmethodPointer\u548cinvoker_method\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u3002 methodPointer\u6307\u5411\u666e\u901a\u6267\u884c\u51fd\u6570\uff0cinvoker_method\u6307\u5411\u53cd\u5c04\u6267\u884c\u51fd\u6570\u3002\\n\\n\u6211\u4eec\u4ee5 methodPointer\u4e3a\u4f8b\uff0c\u8fdb\u4e00\u6b65\u8ddf\u8e2a\u5b83\u7684\u8bbe\u7f6e\u8fc7\u7a0b\uff0c `il2cpp::vm::MetadataCache::GetMethodPointer` \u7684\u5b9e\u73b0\u5982\u4e0b\uff1a\\n\\n```cpp\\nIl2CppMethodPointer il2cpp::vm::MetadataCache::GetMethodPointer(const Il2CppImage* image, uint32_t token)\\n{\\n    uint32_t rid = GetTokenRowId(token);\\n    uint32_t table =  GetTokenType(token);\\n    if (rid == 0)\\n        return NULL;\\n\\n    // ==={{ hybridclr\\n    if (hybridclr::metadata::IsInterpreterImage(image))\\n    {\\n        return hybridclr::metadata::MetadataModule::GetMethodPointer(image, token);\\n    }\\n    // ===}} hybridclr\\n\\n    IL2CPP_ASSERT(rid <= image->codeGenModule->methodPointerCount);\\n\\n    return image->codeGenModule->methodPointers[rid - 1];\\n}\\n```\\n\\n\u53ef\u4ee5\u770b\u51fa\uff0c\u5982\u679c\u662f\u89e3\u91ca\u5668assembly\uff0c\u5c31\u8df3\u8f6c\u5230\u89e3\u91ca\u5668\u5143\u6570\u636e\u6a21\u5757\u83b7\u5f97\u5bf9\u5e94\u7684MethodPointer\u6307\u9488\u3002 \u7ee7\u7eed\u8ddf\u8e2a\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```cpp\\n\\nIl2CppMethodPointer InterpreterImage::GetMethodPointer(uint32_t token)\\n{\\n    uint32_t methodIndex = DecodeTokenRowIndex(token) - 1;\\n    IL2CPP_ASSERT(methodIndex < (uint32_t)_methodDefines.size());\\n    const Il2CppMethodDefinition* methodDef = &_methodDefines[methodIndex];\\n    return hybridclr::interpreter::InterpreterModule::GetMethodPointer(methodDef);\\n}\\n\\nIl2CppMethodPointer InterpreterModule::GetMethodPointer(const Il2CppMethodDefinition* method)\\n{\\n    const NativeCallMethod* ncm = GetNativeCallMethod(method, false);\\n    if (ncm)\\n    {\\n        return ncm->method;\\n    }\\n    //RaiseMethodNotSupportException(method, \\"GetMethodPointer\\");\\n    return (Il2CppMethodPointer)NotSupportNative2Managed;\\n}\\n\\n// interpreter/InterpreterModule.cpp\\ntemplate<typename T>\\nconst NativeCallMethod* GetNativeCallMethod(const T* method, bool forceStatic)\\n{\\n    char sigName[1000];\\n    ComputeSignature(method, !forceStatic, sigName, sizeof(sigName) - 1);\\n    auto it = s_calls.find(sigName);\\n    return (it != s_calls.end()) ? &it->second : nullptr;\\n}\\n\\n// s_calls \u5b9a\u4e49\\nstatic std::unordered_map<const char*, NativeCallMethod, CStringHash, CStringEqualTo> s_calls;\\n\\nvoid InterpreterModule::Initialize()\\n{\\n    for (size_t i = 0; ; i++)\\n    {\\n        NativeCallMethod& method = g_callStub[i];\\n        if (!method.signature)\\n        {\\n            break;\\n        }\\n        s_calls.insert({ method.signature, method });\\n    }\\n\\n    for (size_t i = 0; ; i++)\\n    {\\n        NativeInvokeMethod& method = g_invokeStub[i];\\n        if (!method.signature)\\n        {\\n            break;\\n        }\\n        s_invokes.insert({ method.signature, method });\\n    }\\n}\\n```\\n\\n\u8fd9\u513f\u6839\u636e\u51fd\u6570\u5b9a\u4e49\u8ba1\u7b97\u5176\u7b7e\u540d\u5e76\u4e14\u8fd4\u56de\u4e86\u4e00\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u8fd9\u4e2a\u51fd\u6570\u6307\u9488\u662f\u4ec0\u4e48\u5462\uff1f s_calls\u5728InterpreterModule::Initialize\u4e2d\u4f7f\u7528g_callStub\u521d\u59cb\u5316\u3002\u90a3g_calStub\u53c8\u662f\u4ec0\u4e48\u5462\uff1f\u5b83\u5728 `interpreter/MethodBridge_xxx.cpp` \u4e2d\u5b9a\u4e49\uff0c\u539f\u6765\u662f\u6865\u63a5\u51fd\u6570\u76f8\u5173\u7684\u6570\u636e\u7ed3\u6784\uff01\\n\\n\u4e3a\u4ec0\u4e48\u8981\u8fd4\u56de\u4e00\u4e2a\u8fd9\u6837\u7684\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5c06methodPointer\u6307\u5411 `InterpreterModule::Execute` \u51fd\u6570\u5462\uff1f \u4ee5 `int Foo::Sum(int,int)` \u51fd\u6570\u4e3a\u4f8b\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u5b9e\u9645\u7684\u7b7e\u540d\u4e3a `int32_t (int32_t, int32_t, MethodInfo*)`\uff0c\u5728\u8c03\u7528\u8fd9\u4e2amethodPointer\u51fd\u6570\u65f6\uff0c\u8c03\u7528\u65b9\u4e00\u5b9a\u4f1a\u4f20\u9012\u8fd9\u4e09\u4e2a\u53c2\u6570\u3002\u8fd9\u4e9b\u53c2\u6570\u6bcf\u4e2a\u51fd\u6570\u90fd\u4e0d\u4e00\u6837\uff0c\u5982\u679c\u76f4\u63a5\u6307\u5411 `InterpreterModule::Execute` \u51fd\u6570\uff0c\u7531\u4e8eABI\u8c03\u7528\u65e0\u6cd5\u81ea\u7701\uff08\u5c31\u7b97\u53ef\u4ee5\uff0c\u6027\u80fd\u4e5f\u6bd4\u8f83\u5dee\uff09\uff0cExecute\u51fd\u6570\u65e2\u65e0\u6cd5\u63d0\u53d6\u51fa\u666e\u901a\u53c2\u6570\uff0c\u4e5f\u65e0\u6cd5\u63d0\u53d6\u51faMethodInfo*\u53c2\u6570\uff0c\u56e0\u800c\u65e0\u6cd5\u6b63\u786e\u8fd0\u884c\u3002\u56e0\u6b64\u9700\u8981\u5bf9\u6bcf\u4e2a\u51fd\u6570\uff0c\u9002\u5f53\u5730\u5c06ABI\u8c03\u7528\u4e2d\u7684\u8fd9\u4e9b\u53c2\u6570\u4f20\u9012\u7ed9Execute\u51fd\u6570\u3002\\n\\n\u6865\u63a5\u51fd\u6570\u5982\u5176\u540d\uff0c\u627f\u62c5\u4e86native ABI\u51fd\u6570\u53c2\u6570\u548cinterpreter\u51fd\u6570\u4e4b\u95f4\u53cc\u5411\u7684\u53c2\u6570\u7684\u8f6c\u6362\u4f5c\u7528\u3002\u622a\u53d6\u4e00\u6bb5\u793a\u4f8b\u4ee3\u7801\uff1a\\n\\n```cpp\\n\\n/// AOT \u5230 interpreter \u7684\u8c03\u7528\u53c2\u6570\u8f6c\u6362\\nstatic int64_t __Native2ManagedCall_i8srr8sr(void* __arg0, double __arg1, void* __arg2, const MethodInfo* method)\\n{\\n    StackObject args[4] = {*(void**)&__arg0, *(void**)&__arg1, *(void**)&__arg2 };\\n    StackObject* ret = args + 3;\\n    Interpreter::Execute(method, args, ret);\\n    return *(int64_t*)ret;\\n}\\n\\n// interpreter \u5230 AOT \u7684\u8c03\u7528\u53c2\u6570\u8f6c\u6362\\nstatic void __Managed2NativeCall_i8srr8sr(const MethodInfo* method, uint16_t* argVarIndexs, StackObject* localVarBase, void* ret)\\n{\\n    if (hybridclr::metadata::IsInstanceMethod(method) && !localVarBase[argVarIndexs[0]].obj)\\n    {\\n        il2cpp::vm::Exception::RaiseNullReferenceException();\\n    }\\n    Interpreter::RuntimeClassCCtorInit(method);\\n    typedef int64_t (*NativeMethod)(void* __arg0, double __arg1, void* __arg2, const MethodInfo* method);\\n    *(int64_t*)ret = ((NativeMethod)(method->methodPointer))((void*)(localVarBase+argVarIndexs[0]), *(double*)(localVarBase+argVarIndexs[1]), (void*)(localVarBase+argVarIndexs[2]), method);\\n}\\n```\\n\\n#### \u8fd0\u884c\u65f6Class\u521d\u59cb\u5316\\n\\n\u5373\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u7b2c\u4e00\u6b21\u8bbf\u95ee\u7c7b\u7684\u9759\u6001\u5b57\u6bb5\u6216\u8005\u51fd\u6570\u65f6\u6216\u8005\u521b\u5efa\u5bf9\u8c61\u65f6\u89e6\u53d1\u7684\u7c7b\u578b\u521d\u59cb\u5316\u3002\u5728il2cpp::vm::Runtime::ClassInit(klass)\u4e2d\u5b8c\u6210\u3002\u4e0d\u662f\u7279\u522b\u5173\u952e\uff0c\u6211\u4eec\u540e\u9762\u5728\u5355\u72ec\u6587\u7ae0\u4e2d\u4ecb\u7ecd\u3002\\n\\n### VTable\u865a\u8868\u8ba1\u7b97\\n\\n\u865a\u8868\u662f\u591a\u6001\u7684\u6838\u5fc3\u3002CLI\u7684\u865a\u8868\u8ba1\u7b97\u975e\u5e38\u590d\u6742\uff0c\u4f46\u4e0d\u7406\u89e3\u5b83\u7684\u5b9e\u73b0\u5e76\u4e0d\u5f71\u54cd\u5f00\u53d1\u8005\u7406\u89e3hybridclr\u7684\u6838\u5fc3\u8fd0\u884c\u6d41\u7a0b\uff0c\u6211\u4eec\u540e\u9762\u5728\u5355\u72ec\u6587\u7ae0\u4e2d\u4ecb\u7ecd\u3002\\n\\n### \u5176\u4ed6\u5143\u6570\u636e\\n\\nCustomAttribute\u4f7f\u7528\u5ef6\u8fdf\u521d\u59cb\u5316\u65b9\u5f0f\uff0c\u8ba1\u7b97\u4e5f\u5f88\u590d\u6742\uff0c\u6211\u4eec\u540e\u9762\u5355\u72ec\u6587\u7ae0\u4ecb\u7ecd\u3002\\n\\n## \u5bc4\u5b58\u5668\u6307\u4ee4\u96c6\u8bbe\u8ba1\\n\\n\u76f4\u63a5\u89e3\u91ca\u539f\u59cbIL\u6307\u4ee4\u6709\u51e0\u4e2a\u95ee\u9898\uff1a\\n\\n- IL\u662f\u57fa\u4e8e\u6808\u7684\u6307\u4ee4\uff0c\u8fd0\u884c\u65f6\u7ef4\u62a4\u6267\u884c\u6808\u662f\u4e2a\u65e0\u8c13\u7684\u5f00\u9500\\n- IL\u6709\u5927\u91cf\u5355\u6307\u4ee4\u591a\u529f\u80fd\u7684\u6307\u4ee4\uff0c\u5982add\u6307\u4ee4\u53ef\u4ee5\u7528\u4e8e\u8ba1\u7b97int\u3001long\u3001float\u3001double\u7c7b\u578b\u7684\u548c\uff0c\u5bfc\u81f4\u8fd0\u884c\u65f6\u9700\u8981\u6839\u636e\u4e0a\u6587\u5224\u65ad\u5230\u5e95\u8be5\u6267\u884c\u54ea\u79cd\u8ba1\u7b97\u3002\u4e0d\u4ec5\u589e\u52a0\u4e86\u8fd0\u884c\u65f6\u5224\u5b9a\u7684\u5f00\u9500\uff0c\u8fd8\u589e\u52a0\u4e86\u8fd0\u884c\u65f6\u7ef4\u62a4\u6267\u884c\u6808\u6570\u636e\u7c7b\u578b\u7684\u5f00\u9500\\n- IL\u6307\u4ee4\u5305\u542b\u4e00\u4e9b\u9700\u8981\u8fd0\u884c\u65f6resolve\u7684\u6570\u636e\uff0c\u5982newobj\u6307\u4ee4\u7b2c\u4e00\u4e2a\u53c2\u6570\u662fmethod token\u3002token resolve\u662f\u4e00\u4e2a\u5f00\u9500\u5f88\u5927\u7684\u64cd\u4f5c\uff0c\u6bcf\u6b21\u6267\u884c\u90fd\u8fdb\u884cresolve\u4f1a\u6781\u5927\u62d6\u6162\u6267\u884c\u6027\u80fd\\n- IL\u662f\u57fa\u4e8e\u6808\u7684\u6307\u4ee4\uff0c\u538b\u6808\u9000\u6808\u76f8\u5173\u6307\u4ee4\u6570\u8f83\u591a\u3002\u50cfa=b+c\u8fd9\u6837\u7684\u6307\u4ee4\u9700\u89814\u6761\u6307\u4ee4\u5b8c\u6210\uff0c\u800c\u5982\u679c\u91c7\u7528\u57fa\u4e8e\u5bc4\u5b58\u5668\u7684\u6307\u4ee4\uff0c\u5b8c\u5168\u53ef\u4ee5\u4e00\u6761\u6307\u4ee4\u5b8c\u6210\u3002\\n- IL\u4e0d\u9002\u5408\u505a\u5176\u4ed6\u4f18\u5316\u64cd\u4f5c\uff0c\u5982\u6211\u4eec\u7684InitOnce JIT\u6280\u672f\u3002\\n- \u5176\u4ed6\\n\\n\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5c06\u539f\u59cbIL\u6307\u4ee4\u8f6c\u6362\u4e3a\u66f4\u9ad8\u6548\u7684\u5bc4\u5b58\u5668\u6307\u4ee4\u3002\u7531\u4e8e\u6307\u4ee4\u5f88\u591a\uff0c\u8fd9\u513f\u4e0d\u4ecb\u7ecd\u5bc4\u5b58\u5668\u6307\u4ee4\u96c6\u7684\u8be6\u7ec6\u8bbe\u8ba1\u3002\u4ee5add\u6307\u4ee4\u4e3e\u4f8b\\n\\n```cpp\\n\\n// \u5305\u542btype\u5b57\u6bb5\uff0c\u5373\u6307\u4ee4ID\u3002\\nstruct IRCommon\\n{\\n    HiOpcodeEnum type;\\n};\\n\\n// add int, int -> int \u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u6307\u4ee4\\nstruct IRBinOpVarVarVar_Add_i4 : IRCommon\\n{\\n    uint16_t ret; // \u8ba1\u7b97\u7ed3\u679c\u5bf9\u5e94\u7684 \u6808\u4f4d\u7f6e\\n    uint16_t op1; // \u64cd\u4f5c\u65701\u5bf9\u5e94\u7684\u6808\u4f4d\u7f6e\\n    uint16_t op2; // \u64cd\u4f5c\u65702\u5bf9\u5e94\u7684\u6808\u4f4d\u7f6e\\n};\\n\\n```\\n\\n## \u6307\u4ee4\u96c6\u7684\u8f6c\u6362\\n\\n\u7406\u89e3\u8fd9\u8282\u9700\u8981\u521d\u6b65\u7684\u7f16\u8bd1\u539f\u7406\u76f8\u5173\u77e5\u8bc6\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u975e\u5e38\u6734\u7d20\u7684\u8f6c\u6362\u7b97\u6cd5\uff0c\u5e76\u4e14\u57fa\u672c\u6ca1\u6709\u505a\u6307\u4ee4\u4f18\u5316\u3002\u8f6c\u6362\u8fc7\u7a0b\u5206\u4e3a\u51e0\u6b65\uff1a\\n\\n- BasicBlock \u5212\u5206\u3002 \u5c06IL\u6307\u4ee4\u5757\u5207\u6210\u4e00\u6bb5\u6bb5\u4e0d\u5305\u542b\u4efb\u4f55\u8df3\u8f6c\u6307\u4ee4\u7684\u4ee3\u7801\u5757\uff0c\u79f0\u4e4b\u4e3aBasicBlock\u3002\\n- \u6a21\u62df\u6307\u4ee4\u6267\u884c\u6d41\u7a0b\uff0c\u540c\u65f6\u4f7f\u7528\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u7b97\u6cd5\u904d\u5386\u6240\u6709BasicBlock\uff0c\u5c06\u6bcf\u4e2aBasicBlock\u8f6c\u6362\u4e3aIRBasicBlock\u3002\\n\\nBasicBlock\u5230IRBasicBlock\u8f6c\u6362\u91c7\u7528\u4e86\u6700\u6734\u7d20\u7684\u4e00\u5bf9\u4e00\u6307\u4ee4\u8f6c\u6362\u7b97\u6cd5\uff0c\u8f6c\u6362\u76f8\u5173\u4ee3\u7801\u5728`transform::HiTransform::Transform`\u3002\u6211\u4eec\u4ee5add\u6307\u4ee4\u4e3a\u4f8b\uff1a\\n\\n```cpp\\n\\ncase OpcodeValue::ADD:\\n{\\n    IL2CPP_ASSERT(evalStackTop >= 2);\\n    EvalStackVarInfo& op1 = evalStack[evalStackTop - 2];\\n    EvalStackVarInfo& op2 = evalStack[evalStackTop - 1];\\n\\n    CreateIR(ir, BinOpVarVarVar_Add_i4);\\n    ir->op1 = op1.locOffset;\\n    ir->op2 = op2.locOffset;\\n    ir->ret = op1.locOffset;\\n\\n    EvalStackReduceDataType resultType;\\n    switch (op1.reduceType)\\n    {\\n    case EvalStackReduceDataType::I4:\\n    {\\n        switch (op2.reduceType)\\n        {\\n        case EvalStackReduceDataType::I4:\\n        {\\n            resultType = EvalStackReduceDataType::I4;\\n            ir->type = HiOpcodeEnum::BinOpVarVarVar_Add_i4;\\n            break;\\n        }\\n        case EvalStackReduceDataType::I:\\n        case EvalStackReduceDataType::Ref:\\n        {\\n            CreateAddIR(irConv, ConvertVarVar_i4_i8);\\n            irConv->dst = irConv->src = op1.locOffset;\\n\\n            resultType = op2.reduceType;\\n            ir->type = HiOpcodeEnum::BinOpVarVarVar_Add_i8;\\n            break;\\n        }\\n        default:\\n        {\\n            IL2CPP_ASSERT(false);\\n            break;\\n        }\\n        }\\n        break;\\n    }\\n    case EvalStackReduceDataType::I8:\\n    {\\n        switch (op2.reduceType)\\n        {\\n        case EvalStackReduceDataType::I8:\\n        case EvalStackReduceDataType::I: // not support i8 + i ! but we support\\n        {\\n            resultType = EvalStackReduceDataType::I8;\\n            ir->type = HiOpcodeEnum::BinOpVarVarVar_Add_i8;\\n            break;\\n        }\\n        default:\\n        {\\n            IL2CPP_ASSERT(false);\\n            break;\\n        }\\n        }\\n        break;\\n    }\\n    case EvalStackReduceDataType::I:\\n    case EvalStackReduceDataType::Ref:\\n    {\\n        switch (op2.reduceType)\\n        {\\n        case EvalStackReduceDataType::I4:\\n        {\\n            CreateAddIR(irConv, ConvertVarVar_i4_i8);\\n            irConv->dst = irConv->src = op2.locOffset;\\n\\n            resultType = op1.reduceType;\\n            ir->type = HiOpcodeEnum::BinOpVarVarVar_Add_i8;\\n            break;\\n        }\\n        case EvalStackReduceDataType::I:\\n        case EvalStackReduceDataType::I8:\\n        {\\n            resultType = op1.reduceType;\\n            ir->type = HiOpcodeEnum::BinOpVarVarVar_Add_i8;\\n            break;\\n        }\\n        default:\\n        {\\n            IL2CPP_ASSERT(false);\\n            break;\\n        }\\n        }\\n        break;\\n    }\\n    case EvalStackReduceDataType::R4:\\n    {\\n        switch (op2.reduceType)\\n        {\\n        case EvalStackReduceDataType::R4:\\n        {\\n            resultType = op2.reduceType;\\n            ir->type = HiOpcodeEnum::BinOpVarVarVar_Add_f4;\\n            break;\\n        }\\n        default:\\n        {\\n            IL2CPP_ASSERT(false);\\n            break;\\n        }\\n        }\\n        break;\\n    }\\n    case EvalStackReduceDataType::R8:\\n    {\\n        switch (op2.reduceType)\\n        {\\n        case EvalStackReduceDataType::R8:\\n        {\\n            resultType = op2.reduceType;\\n            ir->type = HiOpcodeEnum::BinOpVarVarVar_Add_f8;\\n            break;\\n        }\\n        default:\\n        {\\n            IL2CPP_ASSERT(false);\\n            break;\\n        }\\n        }\\n        break;\\n    }\\n    default:\\n    {\\n        IL2CPP_ASSERT(false);\\n        break;\\n    }\\n    }\\n\\n    PopStack();\\n    op1.reduceType = resultType;\\n    op1.byteSize = GetSizeByReduceType(resultType);\\n    AddInst(ir);\\n    ip++;\\n    continue;\\n}\\n\\n```\\n\\n\u4ece\u4ee3\u7801\u53ef\u4ee5\u770b\u51fa\uff0c\u5176\u5b9e\u8f6c\u6362\u7b97\u6cd5\u975e\u5e38\u7b80\u5355\uff0c\u5c31\u662f\u6839\u636eadd\u6307\u4ee4\u7684\u53c2\u6570\u7c7b\u578b\uff0c\u51b3\u5b9a\u8f6c\u6362\u4e3a\u54ea\u6761\u5bc4\u5b58\u5668\u6307\u4ee4\uff0c\u540c\u65f6\u6b63\u786e\u8bbe\u7f6e\u6307\u4ee4\u7684\u5b57\u6bb5\u503c\u3002\\n\\n## \u89e3\u91ca\u6267\u884chybridclr\u6307\u4ee4\u96c6\\n\\n\u89e3\u91ca\u6267\u884c\u5728\u4ee3\u7801 `interpreter::InterpreterModule::Execute` \u51fd\u6570\u4e2d\u5b8c\u6210\u3002\u6d89\u53ca\u5230\u51e0\u90e8\u5206\uff1a\\n\\n- \u51fd\u6570\u5e27\u6784\u5efa\uff0c\u53c2\u6570\u3001\u5c40\u90e8\u53d8\u91cf\u3001\u6267\u884c\u6808\u7684\u521d\u59cb\u5316\\n- \u6267\u884c\u666e\u901a\u6307\u4ee4\\n- \u8c03\u7528\u5b50\u51fd\u6570\\n- \u5f02\u5e38\u5904\u7406\\n\\n\u8fd9\u5757\u5185\u5bb9\u4e5f\u5f88\u591a\uff0c\u6211\u4eec\u4f1a\u5728\u591a\u7bc7\u6587\u7ae0\u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u5b9e\u73b0\uff0c\u8fd9\u91cc\u7b80\u5355\u6458\u53d6 BinOpVarVarVar_Add_i4 \u6307\u4ee4\u7684\u5b9e\u73b0\u4ee3\u7801:\\n\\n```cpp\\ncase HiOpcodeEnum::BinOpVarVarVar_Add_i4:\\n{\\n    uint16_t __ret = *(uint16_t*)(ip + 2);\\n    uint16_t __op1 = *(uint16_t*)(ip + 4);\\n    uint16_t __op2 = *(uint16_t*)(ip + 6);\\n    (*(int32_t*)(localVarBase + __ret)) = (*(int32_t*)(localVarBase + __op1)) + (*(int32_t*)(localVarBase + __op2));\\n    ip += 8;\\n    continue;\\n}\\n```\\n\\n\u76f8\u4fe1\u8fd9\u6bb5\u4ee3\u7801\u8fd8\u662f\u6bd4\u8f83\u597d\u7406\u89e3\u7684\u3002\u6307\u4ee4\u96c6\u8f6c\u6362\u548c\u6307\u4ee4\u89e3\u91ca\u76f8\u5173\u4ee3\u7801\u662fhybridclr\u7684\u6838\u5fc3\uff0c\u4f46\u590d\u6742\u5ea6\u5374\u4e0d\u9ad8\uff0c\u8fd9\u5f97\u611f\u8c22il2cpp\u8fd0\u884c\u65f6\u5e2e\u6211\u4eec\u627f\u62c5\u4e86\u7edd\u5927\u591a\u6570\u590d\u6742\u7684\u5143\u6570\u636e\u76f8\u5173\u64cd\u4f5c\u7684\u652f\u6301\u3002\\n\\n## \u5176\u4ed6\u5982GC\u3001\u591a\u7ebf\u7a0b\u76f8\u5173\u5904\u7406\\n\\n\u6211\u4eec\u5728hybridclr\u53ef\u884c\u6027\u7684\u601d\u7ef4\u5b9e\u9a8c\u4e2d\u5206\u6790\u8fc7\u8fd9\u4e24\u90e8\u5206\u5b9e\u73b0\u3002\\n\\n### GC\\n\\n\u5bf9\u4e8e\u5bf9\u8c61\u5206\u914d\uff0c\u6211\u4eec\u4f7f\u7528il2cpp::vm::Object::New\u51fd\u6570\u5206\u914d\u5bf9\u8c61\u5373\u53ef\u3002\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u6d89\u53ca\u5230GC\u7684\u90e8\u5206\u5982ldstr\u6307\u4ee4\u4e2dIl2CppString\u5bf9\u8c61\u7684\u7f13\u5b58\uff0c\u5229\u7528\u4e86\u4e00\u4e9b\u5176\u4ed6il2cpp\u8fd0\u884c\u65f6\u63d0\u4f9b\u7684GC\u673a\u5236\u3002\\n\\n### \u591a\u7ebf\u7a0b\u76f8\u5173\u5904\u7406\\n\\n- volatile \u3002\u5bf9\u4e8e\u6307\u4ee4\u4e2d\u5305\u542bvolatile\u524d\u7f00\u6307\u4ee4\uff0c\u6211\u4eec\u7b80\u5355\u5728\u6267\u884c\u4ee3\u7801\u524d\u540e\u63d2\u5165MemoryBarrier\u3002\\n- ThreadStatic \u3002 \u4f7f\u7528il2cpp\u5185\u7f6e\u7684Class\u7684ThreadStatic\u53d8\u91cf\u673a\u5236\u5373\u53ef\u3002\\n- Thread\u3002 \u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u6258\u7ba1\u7ebf\u7a0b\uff0c\u90fd\u521b\u5efa\u4e86\u4e00\u4e2a\u5bf9\u5e94\u7684\u89e3\u91ca\u5668\u6808\u3002\\n- async \u76f8\u5173\u3002\u7531\u4e8e\u5f02\u6b65\u76f8\u5173\u53ea\u662f\u8bed\u6cd5\u7cd6\uff0c\u7531\u7f16\u8bd1\u5668\u548c\u6807\u51c6\u5e93\u5b8c\u6210\u4e86\u6240\u6709\u5185\u5bb9\u3002hybridclr\u53ea\u9700\u8981\u89e3\u51b3\u5176\u4e2d\u4ea7\u751f\u7684AOT\u6cdb\u578b\u5b9e\u4f8b\u5316\u7684\u95ee\u9898\u5373\u53ef\u3002\\n\\n## \u603b\u7ed3\\n\\n\u6982\u62ec\u5730\u8bf4\uff0chybridclr\u7684\u5b9e\u73b0\u4e3a\uff1a\\n\\n- MetadataCache::LoadAssemblyFromBytes \uff08c#\u5c42\u8c03\u7528Assembly.Load\u65f6\u89e6\u53d1\uff09\u65f6\u52a0\u8f7d\u5e76\u6ce8\u518cinterpreter Assembly\\n- il2cpp\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u5ef6\u8fdf\u521d\u59cb\u5316\u7c7b\u578b\u76f8\u5173\u5143\u6570\u636e\uff0c\u5176\u4e2d\u5173\u952e\u4e3a\u6b63\u786e\u8bbe\u7f6e\u4e86MethodInfo\u5143\u6570\u636e\u4e2dmethodPointer\u6307\u9488\\n- il2cpp\u8fd0\u884c\u65f6\u901a\u8fc7methodPointer\u6216\u8005methodInvoke\u6307\u9488\uff0c\u518d\u7ecf\u8fc7\u6865\u63a5\u51fd\u6570\u8df3\u8f6c\uff0c\u6700\u7ec8\u6267\u884c\u4e86Interpreter::Execute\u51fd\u6570\u3002\\n  - Execute\u51fd\u6570\u5728\u7b2c\u4e00\u6b21\u6267\u884c\u67d0interpreter\u51fd\u6570\u65f6\u89e6\u53d1HiTransform::Transform\u64cd\u4f5c\uff0c\u5c06\u539f\u59cbIL\u6307\u4ee4\u7ffb\u8bd1\u4e3ahybridclr\u7684\u5bc4\u5b58\u5668\u6307\u4ee4\u3002\\n  - \u7136\u540e\u6267\u884c\u8be5\u51fd\u6570\u5bf9\u5e94\u7684hybridclr\u5bc4\u5b58\u5668\u6307\u4ee4\u3002\\n\\n\u81f3\u6b64\u5b8c\u6210hybridclr\u7684\u6280\u672f\u539f\u7406\u4ecb\u7ecd\u3002"},{"id":"mindexperiment","metadata":{"permalink":"/blog/mindexperiment","source":"@site/blog/2022-07-08-mindexperiment.md","title":"\u5173\u4e8ehybridclr\u53ef\u884c\u6027\u7684\u601d\u7ef4\u5b9e\u9a8c","description":"\u5728\u786e\u5b9a\u76ee\u6807\uff0c\u52a8\u624b\u5b9e\u73b0hybridclr\u524d\uff0c\u6709\u4e00\u4e2a\u5fc5\u987b\u8003\u8651\u7684\u95ee\u9898\u2014\u2014\u6211\u4eec\u5982\u4f55\u786e\u5b9ahybridclr\u7684\u53ef\u884c\u6027\uff1f","date":"2022-07-08T00:00:00.000Z","formattedDate":"2022\u5e747\u67088\u65e5","tags":[],"readingTime":9.035,"hasTruncateMarker":false,"authors":[{"name":"walon"}],"frontMatter":{"slug":"mindexperiment","authors":{"name":"walon"}},"prevItem":{"title":"hybridclr\u6280\u672f\u539f\u7406\u5256\u6790","permalink":"/blog/principle"},"nextItem":{"title":"\u6df1\u5165\u63a2\u7a76hybridclr \u76ee\u5f55","permalink":"/blog/catelog"}},"content":"\u5728\u786e\u5b9a\u76ee\u6807\uff0c\u52a8\u624b\u5b9e\u73b0hybridclr\u524d\uff0c\u6709\u4e00\u4e2a\u5fc5\u987b\u8003\u8651\u7684\u95ee\u9898\u2014\u2014\u6211\u4eec\u5982\u4f55\u786e\u5b9ahybridclr\u7684\u53ef\u884c\u6027\uff1f\\n\\nil2cpp\u867d\u7136\u4e0d\u662f\u4e00\u4e2a\u6781\u5176\u5b8c\u6574\u7684\u8fd0\u884c\u65f6\uff0c\u4f46\u4ee3\u7801\u4ecd\u9ad8\u8fbe12w\u884c\uff0c\u590d\u6742\u5ea6\u76f8\u5f53\u9ad8\uff0c\u60f3\u8981\u77ed\u671f\u5185\u6df1\u5165\u4e86\u89e3\u5b83\u7684\u5b9e\u73b0\u662f\u975e\u5e38\u56f0\u96be\u7684\u3002\u9664\u4e86\u5b98\u65b9\u51e0\u4e2a\u4ecb\u7ecdil2cpp\u7684\u535a\u5ba2\u5916\uff0c\u51e0\u4e4e\u627e\u4e0d\u5230\u5176\u4ed6\u6587\u6863\uff0c\\n\u800c\u4e14`Hybrid mode execution` \u7684\u5b9e\u73b0\u590d\u6742\u5ea6\u4e5f\u5f88\u9ad8\u3002\u78e8\u5200\u4e0d\u8bef\u780d\u67f4\u5de5\uff0c\u5728\u52a8\u624b\u524d\u4ece\u7406\u8bba\u4e0a\u786e\u4fe1\u8fd9\u5957\u65b9\u6848\u6709\u6781\u9ad8\u53ef\u884c\u6027\uff0c\u662f\u5b8c\u5168\u5fc5\u8981\u7684\u3002\\n\\n\u4ee5\u6211\u4eec\u5bf9CLR\u8fd0\u884c\u65f6\u7684\u8ba4\u8bc6\uff0c\u8981\u5b9e\u73b0 `hybrid mode execution` \u673a\u5236\uff0c\u81f3\u5c11\u8981\u89e3\u51b3\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898\\n\\n- \u80fd\u591f\u52a8\u6001\u6ce8\u518c\u5143\u6570\u636e\uff0c\u8fd9\u4e9b\u52a8\u6001\u6ce8\u518c\u7684\u5143\u6570\u636e\u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u4e2d\u8ddfAOT\u5143\u6570\u636e\u5b8c\u5168\u7b49\u4ef7\u3002\\n- \u6240\u6709\u8c03\u7528\u52a8\u6001\u52a0\u8f7d\u7684assembly\u4e2d\u51fd\u6570\u7684\u8def\u5f84\uff0c\u90fd\u80fd\u5b9a\u5411\u5230\u6b63\u786e\u7684\u89e3\u91ca\u5668\u5b9e\u73b0\u3002\u5305\u62ec\u865a\u51fd\u6570override\u3001delegate\u56de\u8c03\u3001\u53cd\u5c04\u8c03\u7528\u7b49\u7b49\u3002\\n- \u89e3\u91ca\u5668\u4e2d\u7684gc\uff0c\u5fc5\u987b\u80fd\u591f\u4e0eAOT\u90e8\u5206\u7684gc\u7edf\u4e00\u5904\u7406\u3002\\n- \u591a\u7ebf\u7a0b\u76f8\u5173\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002\u5305\u62ec\u4e14\u4e0d\u9650\u4e8e\u521b\u5efaThread\u3001async\u3001volatile\u3001ThreadStatic\u7b49\u7b49\u3002\\n\\n\u6211\u4eec\u4e0b\u9762\u4e00\u4e00\u5206\u6790\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002\\n\\n## \u52a8\u6001\u6ce8\u518c\u5143\u6570\u636e\\n\\n\u6211\u4eec\u5927\u7565\u5730\u5206\u6790\u4e86il2cpp\u5143\u6570\u636e\u521d\u59cb\u5316\u76f8\u5173\u4ee3\u7801\uff0c\u5f97\u51fa\u4ee5\u4e0b\u7ed3\u8bba\u3002\\n\\n\u9996\u5148\uff0c\u52a8\u6001\u4fee\u6539globalmetadata.dat\u8fd9\u4e2a\u65b9\u5f0f\u4e0d\u53ef\u884c\u3002\u56e0\u4e3aglobalmetadata.dat\u4fdd\u5b58\u4e86\u6301\u4e45\u5316\u7684\u5143\u6570\u636e\uff0c\u5143\u6570\u636e\u4e4b\u95f4\u5173\u7cfb\u5927\u91cf\u4f7f\u7528id\u6765\u76f8\u4e92\u5f15\u7528\uff0c\u6dfb\u52a0\u65b0\u7684\u6570\u636e\u5f88\u5bb9\u6613\u5f15\u5165\u9519\u8bef\uff0c\u53d8\u6210\u6781\u96be\u68c0\u6d4b\u7684bug\u3002\u53e6\u5916\uff0cglobalmetadata\u91cc\u6709\u4e0d\u5c11\u6570\u636e\u9879\u7531\u4e8e\u6ca1\u6709\u6587\u6863\uff0c\u65e0\u6cd5\u5206\u6790\u5b9e\u9645\u7528\u9014\uff0c\u4e5f\u4e0d\u5f97\u800c\u77e5\u5982\u4f55\u8bbe\u7f6e\u6b63\u786e\u7684\u503c\u3002\u53e6\u5916\uff0c\u8fd0\u884c\u65f6\u4f1a\u52a8\u6001\u52a0\u8f7d\u65b0\u7684dll\uff0c\u91cd\u65b0\u8ba1\u7b97globalmetadata.dat\u662f\u6210\u672c\u9ad8\u6602\u7684\u4e8b\u60c5\u3002\u800c\u4e14il2cpp\u4e2d\u5143\u6570\u636e\u7ba1\u7406\u5e76\u4e0d\u652f\u6301\u4e8c\u6b21\u52a0\u8f7d\uff0c\u91cd\u590d\u52a0\u8f7dglobalmetadata.dat\u4f1a\u4ea7\u751f\u76f8\u5f53\u5927\u7684\u4ee3\u7801\u6539\u52a8\u3002\\n\\n\u4e00\u4e2a\u8f83\u53ef\u884c\u529e\u6cd5\uff0c\u4fee\u6539\u6240\u6709\u5143\u6570\u636e\u8bbf\u95ee\u7684\u5e95\u5c42\u51fd\u6570\uff0c\u68c0\u67e5\u88ab\u8bbf\u95ee\u7684\u5143\u6570\u636e\u7684\u7c7b\u578b\uff0c\u5982\u679c\u662fAOT\u5143\u6570\u636e\uff0c\u5219\u4fdd\u6301\u4e4b\u524d\u7684\u8c03\u7528\uff0c\u5982\u679c\u6765\u81ea\u52a8\u6001\u52a0\u8f7d\uff0c\u5219\u8df3\u8f6c\u5230hybridclr\u7684\u5143\u6570\u636e\u7ba1\u7406\u6a21\u5757\uff0c\u8fd4\u56de\u4e00\u4e2a\u6070\u5f53\u7684\u503c\u3002\u4f46\u8fd9\u513f\u53c8\u9047\u5230\u4e00\u4e2a\u95ee\u9898\uff0c\u5176\u6b21globalmetadata\u4e3a\u4e86\u4f18\u5316\u6027\u80fd\uff0c\u6240\u6709dll\u4e2d\u7684\u5143\u6570\u636e\u5728\u7edf\u4e00\u7684id\u547d\u540d\u7a7a\u95f4\u4e0b\u3002\u5f88\u591a\u5143\u6570\u636e\u67e5\u8be2\u64cd\u4f5c\u4ec5\u4ec5\u4f7f\u7528\u4e00\u4e2aid\u53c2\u6570\uff0c\u5982\u4f55\u6839\u636eid\u533a\u522b\u51fa\u5230\u5e95\u662fAOT\u8fd8\u662finterpreter\u7684\u5143\u6570\u636e\uff1f\\n\\n\u6211\u4eec\u53d1\u73b0\u5b9e\u9645\u9879\u76ee\u751f\u6210\u7684globalmetadata.dat\u4e2d\u8fd9\u4e9b\u5143\u6570\u636eid\u7684\u503c\u90fd\u8f83\u5c0f\uff0c\u6700\u5927\u4e5f\u4e0d\u8fc7\u51e0\u5341\u4e07\u7ea7\u522b\u3002\u601d\u8003\u540e\u7528\u4e00\u4e2a\u6280\u5de7\uff1a\u6211\u4eec\u5c06id\u5206\u6210\u4e24\u90e8\u5206: \u9ad8\u4f4d\u4e3aimage id\uff0c\u4f4e\u4f4d\u4e3a\u5b9e\u9645\u4e0a\u7684id\uff0c\u5c06image id=0\u4fdd\u7559\u7ed9AOT\u5143\u6570\u636e\u4f7f\u7528\u3002\u6211\u4eec\u4e3a\u6bcf\u4e2a\u52a8\u6001\u52a0\u8f7d\u7684dll\u5206\u914d\u4e00\u4e2aimage id\uff0c\u8fd9\u4e2aimage\u4e2d\u89e3\u6790\u51fa\u7684\u6240\u6709\u5143\u6570\u636eid\u7684\u9ad8\u4f4d\u4e3a\u76f8\u5e94\u7684image id\u3002\\n\\n\u6211\u4eec\u901a\u8fc7\u8fd9\u4e2a\u6280\u5de7\uff0chook\u4e86\u6240\u6709\u5e95\u5c42\u8bbf\u95ee\u5143\u6570\u636e\u7684\u65b9\u6cd5\u3002\u5927\u7ea6\u4fee\u6539\u4e86\u51e0\u5341\u5904\uff0c\u57fa\u672c\u90fd\u662f\u5982\u4e0b\u8fd9\u6837\u7684\u4ee3\u7801\uff0c\u5c3d\u91cf\u4e0d\u4fee\u6539\u539f\u59cb\u903b\u8f91\uff0c\u5f88\u5bb9\u6613\u4fdd\u8bc1\u6b63\u786e\u6027\u3002\\n\\n```cpp\\nconst char* il2cpp::vm::GlobalMetadata::GetStringFromIndex(StringIndex index)\\n{\\n    // ==={{ hybridclr\\n    if (hybridclr::metadata::IsInterpreterIndex(index))\\n    {\\n        return hybridclr::metadata::MetadataModule::GetStringFromEncodeIndex(index);\\n    }\\n    // ===}} hybridclr\\n    IL2CPP_ASSERT(index <= s_GlobalMetadataHeader->stringSize);\\n    const char* strings = MetadataOffset<const char*>(s_GlobalMetadata, s_GlobalMetadataHeader->stringOffset, index);\\n    #if __ENABLE_UNITY_PLUGIN__\\n        if (g_get_string != NULL)\\n        {\\n            g_get_string((char*)strings, index);\\n        }\\n    #endif // __ENABLE_UNITY_PLUGIN__\\n        return strings;\\n}\\n\\n```\\n\\n\u6211\u4eec\u5728\u52a8\u624b\u524d\u68c0\u67e5\u4e86\u591a\u4e2a\u76f8\u5173\u51fd\u6570\uff0c\u57fa\u672c\u6ca1\u6709\u95ee\u9898\u3002\u867d\u7136\u4e0d\u6562\u786e\u5b9a\u8fd9\u4e00\u5b9a\u662f\u53ef\u884c\u7684\uff0c\u4f46\u5143\u6570\u636e\u52a0\u8f7d\u662fhybridclr\u7b2c\u4e00\u9636\u6bb5\u7684\u5f00\u53d1\u4efb\u52a1\uff0c\u4e07\u4e00\u53d1\u73b0\u95ee\u9898\uff0c\u53ca\u65f6\u4e2d\u6b62hybridclr\u5f00\u53d1\u635f\u5931\u4e0d\u5927\u3002\u4e8e\u662f\u6211\u4eec\u8ba4\u4e3a\u7b97\u662f\u89e3\u51b3\u4e86\u7b2c\u4e00\u4e2a\u95ee\u9898\u3002\\n\\n## \u6240\u6709\u8c03\u7528\u52a8\u6001\u52a0\u8f7d\u7684assembly\u4e2d\u51fd\u6570\u7684\u8def\u5f84\uff0c\u90fd\u80fd\u5b9a\u5411\u5230\u6b63\u786e\u7684\u89e3\u91ca\u5668\u5b9e\u73b0\\n\\n\u6211\u4eec\u5206\u6790\u4e86il2cpp\u4e2d\u5173\u4e8eMethod\u5143\u6570\u636e\u7684\u7ba1\u7406\u65b9\u5f0f\uff0c\u53d1\u73b0MethodInfo\u7ed3\u6784\u4e2d\u4fdd\u5b58\u4e86\u8fd0\u884c\u65f6\u5b9e\u9645\u6267\u884c\u903b\u8f91\u7684\u51fd\u6570\u6307\u9488\u3002\u5982\u679c\u6211\u4eec\u7b80\u5355\u5730\u8bbe\u7f6e\u52a8\u6001\u52a0\u8f7d\u7684\u51fd\u6570\u5143\u6570\u636e\u7684MethodInfo\u7ed3\u6784\u7684\u6307\u9488\u4e3a\u6b63\u786e\u7684\u89e3\u91ca\u5668\u51fd\u6570\uff0c\u80fd\u5426\u4fdd\u8bc1\u6240\u6709\u6d41\u7a0b\u5bf9\u8be5\u51fd\u6570\u7684\u8c03\u7528\uff0c\u90fd\u80fd\u6b63\u786e\u5b9a\u5411\u5230\u89e3\u91ca\u5668\u51fd\u6570\u5462\uff1f\\n\\n\u4e25\u8c28\u601d\u8003\u540e\u7684\u7ed3\u8bba\u662f\u80af\u5b9a\u7684\u3002\u9996\u5148AOT\u90e8\u5206\u4e0d\u53ef\u80fd\u76f4\u63a5\u8c03\u7528\u52a8\u6001\u52a0\u8f7d\u7684dll\u4e2d\u7684\u51fd\u6570\u3002\u5176\u6b21\uff0c\u8fd0\u884c\u65f6\u5e76\u6ca1\u6709\u5176\u4ed6\u5730\u65b9\u4fdd\u5b58\u4e86\u51fd\u6570\u6307\u9488\u3002\u610f\u5473\u7740\uff0c\u5982\u679c\u60f3\u8c03\u7528\u52a8\u6001\u52a0\u8f7d\u7684\u51fd\u6570\uff0c\u5fc5\u987b\u83b7\u5f97MethodInfo\u4e2d\u7684\u51fd\u6570\u6307\u9488\uff0c\u624d\u80fd\u6b63\u786e\u6267\u884c\u5230\u76ee\u6807\u51fd\u6570\u3002\u610f\u5473\u7740\u6211\u4eec\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u6240\u6709\u5bf9\u8be5\u51fd\u6570\u7684\u8c03\u7528\u4e00\u5b9a\u4f1a\u8c03\u7528\u5230\u6b63\u786e\u7684\u89e3\u91ca\u5668\u51fd\u6570\u3002\\n\\n\u81f3\u4e8e\u6211\u4eec\u89e3\u51b3\u4e86\u7b2c\u4e8c\u4e2a\u95ee\u9898\u3002\\n\\n## \u89e3\u91ca\u5668\u4e2d\u7684gc\uff0c\u5fc5\u987b\u80fd\u591f\u4e0eAOT\u90e8\u5206\u7684gc\u7edf\u4e00\u5904\u7406\\n\\n\u5f88\u5bb9\u6613\u89c2\u5bdf\u5230\uff0c\u901a\u8fc7il2cpp::vm::Object::New\u53ef\u4ee5\u5206\u914d\u6258\u7ba1\u5bf9\u8c61\uff0c\u901a\u8fc7gc\u6a21\u5757\u7684\u51fd\u6570\u53ef\u4ee5\u5206\u914d\u4e00\u4e9b\u80fd\u591f\u88abgc\u81ea\u52a8\u7ba1\u7406\u7684\u5185\u5b58\u3002\u4f46\u6211\u4eec\u5982\u4f55\u4fdd\u8bc1\uff0c\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u5c31\u4e00\u5b9a\u80fd\u4fdd\u5b58\u6b63\u786e\u6027\u5462\uff0c\u4f1a\u4e0d\u4f1a\u6709\u7279\u6b8a\u7684\u4f7f\u7528\u89c4\u5219 \uff0chybridclr\u7684\u89e3\u91ca\u5668\u4ee3\u7801\u65e0\u6cd5\u4e0e\u4e4b\u914d\u5408\u5de5\u4f5c\u5462\uff1f\\n\\n\u8003\u8651\u5230AOT\u4ee3\u7801\u4e2d\u4e5f\u6709\u5f88\u591agc\u76f8\u5173\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u68c0\u67e5\u4e86\u4e00\u4e9bil2cpp\u4e3a\u8fd9\u4e9b\u64cd\u4f5c\u751f\u6210\u7684c++\u4ee3\u7801\uff0c\u90fd\u662f\u7b80\u7b80\u5355\u5355\u76f4\u63a5\u8c03\u7528 il2cpp::vm::Object::New \u4e4b\u7c7b\u7684\u51fd\u6570\uff0c\u5e76\u65e0\u7279\u6b8a\u4e4b\u5904\u3002 \u53ef\u4ee5\u8fd9\u4e48\u5206\u6790\uff1ail2cpp\u751f\u6210\u7684\u4ee3\u7801\u662f\u666e\u901a\u7684c++\u4ee3\u7801\uff0chybridclr\u89e3\u91ca\u5668\u4ee3\u7801\u4e5f\u662fc++\u4ee3\u7801\uff0c\u65e2\u7136\u751f\u6210\u7684\u4ee3\u7801\u7684\u5185\u5b58\u4f7f\u7528\u65b9\u5f0f\u80fd\u591f\u6b63\u786e\u5de5\u4f5c\uff0c\u90a3\u4e48hybridclr\u89e3\u91ca\u5668\u4e2dgc\u76f8\u5173\u4ee3\u7801\uff0c\u80af\u5b9a\u4e5f\u80fd\u6b63\u786e\u5de5\u4f5c\u3002\\n\\n\u81f3\u6b64\uff0c\u6211\u4eec\u89e3\u51b3\u4e86\u7b2c\u4e09\u4e2a\u95ee\u9898\u3002\\n\\n## \u591a\u7ebf\u7a0b\u76f8\u5173\u4ee3\u7801\u80fd\u6b63\u5e38\u5de5\u4f5c\\n\\n\u4e0e\u4e0a\u4e00\u4e2a\u95ee\u9898\u76f8\u4f3c\u3002\u6211\u4eec\u68c0\u67e5\u4e86il2cpp\u751f\u6210\u7684c++\u4ee3\u7801\uff0c\u53d1\u73b0\u5e76\u65e0\u7279\u6b8a\u4e4b\u5904\u4e5f\u80fd\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u6b63\u5e38\u8fd0\u884c\uff0c\u90a3\u6211\u4eec\u4e5f\u53ef\u4ee5\u975e\u5e38\u786e\u4fe1\uff0chybridclr\u89e3\u91ca\u5668\u7684\u4ee3\u7801\u53ea\u8981\u7b26\u5408\u5e38\u89c4\u7684\u591a\u7ebf\u7a0b\u7684\u8981\u6c42\uff0c\u4e5f\u80fd\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u6b63\u5e38\u8fd0\u884c\u3002\\n\\n\u81f3\u6b64\uff0c\u6211\u4eec\u89e3\u51b3\u4e86\u7b2c\u56db\u4e2a\u95ee\u9898\u3002\\n\\n## \u603b\u7ed3\\n\\n\u6211\u4eec\u901a\u8fc7\u5c11\u91cf\u7684\u5bf9\u5b9e\u9645il2cpp\u4ee3\u7801\u7684\u89c2\u5bdf\uff0c\u4ee5\u53ca\u5bf9CLR\u8fd0\u884c\u65f6\u539f\u7406\u7684\u4e86\u89e3\uff0c\u518d\u914d\u5408\u601d\u7ef4\u5b9e\u9a8c\uff0c\u53ef\u4ee599.9%\u4ee5\u4e0a\u786e\u5b9a\uff0c\u65e2\u7136il2cpp\u751f\u6210\u7684\u4ee3\u7801\u90fd\u80fd\u5728\u8fd0\u884c\u65f6\u6b63\u786e\u8fd0\u884c\uff0c\u90a3hybridclr\u89e3\u91ca\u6a21\u5f0f\u4e0b\u6267\u884c\u7684\u4ee3\u7801\uff0c\u4e5f\u80fd\u6b63\u786e\u8fd0\u884c\u3002\\n\\n\u6211\u4eec\u5728\u5b8c\u6210\u601d\u7ef4\u5b9e\u9a8c\u7684\u90a3\u4e00\u523b\uff0c\u96be\u63a9\u5185\u5fc3\u6fc0\u52a8\u7684\u5fc3\u60c5\u3002\u4f5c\u4e3a\u4e00\u540d\u7269\u7406\u4e13\u4e1a\u7684IT\u4eba\uff0c\u8111\u6d77\u91cc\u7b2c\u4e00\u65f6\u95f4\u6d6e\u73b0\u51fa\u7231\u56e0\u65af\u5766\u5728\u601d\u8003\u5e7f\u4e49\u76f8\u5bf9\u8bba\u65f6\u7684\uff0c\u4f7f\u7528\u7535\u68af\u601d\u7ef4\u5b9e\u9a8c\u5f97\u51fa\u5f15\u529b\u4f7f\u65f6\u7a7a\u5f2f\u66f2\u8fd9\u4e00\u60ca\u4eba\u7ed3\u8bba\u3002\u6211\u4eec\u4e0d\u6562\u6bd4\u80a9\u8fd9\u79cd\u4f1f\u5927\u7684\u79d1\u5b66\u5bb6\uff0c\u4f46\u6211\u4eec\u786e\u5b9e\u5728\u4f7f\u7528\u7c7b\u4f3c\u7684\u601d\u7ef4\u6280\u5de7\u3002\u53ef\u4ee5\u8bf4\uff0chybridclr\u4e0d\u662f\u7b80\u5355\u7684\u7ecf\u9a8c\u603b\u7ed3\uff0c\u662f\u6df1\u523b\u6d1e\u5bdf\u529b\u4e0e\u5206\u6790\u80fd\u529b\u5b55\u80b2\u7684\u7ed3\u679c\u3002"},{"id":"catelog","metadata":{"permalink":"/blog/catelog","source":"@site/blog/2022-07-06-catelog.md","title":"\u6df1\u5165\u63a2\u7a76hybridclr \u76ee\u5f55","description":"\u6211\u4eec\u5728\u5b9e\u73b0hybridclr\u8fc7\u7a0b\u4e2d\uff0c\u6df1\u5165\u7814\u7a76\u4e86CLI\u89c4\u8303\u4e0eil2cpp\u5b9e\u73b0\uff0c\u79ef\u7d2f\u4e86\u5927\u91cf\u5b9d\u8d35\u7684\u7ecf\u9a8c\u3002\u8003\u8651\u5230\u56fd\u5185\u6e38\u620f\u884c\u4e1a\u5bf9clr\u53cail2cpp\u76f8\u5173\u7684\u8d44\u6599\u4e0d\u591a\uff0c\u6211\u4eec\u5e0c\u671b\u5c06\u8fd9\u4e9b\u77e5\u8bc6\u7cfb\u7edf\u6027\u5730\u6574\u7406\u51fa\u6765\uff0c\u5e2e\u52a9\u90a3\u4e9b\u6e34\u671b\u6df1\u5165\u7814\u7a76Unity\u4e0bCLR Runtime\u5b9e\u73b0\u7684\u5f00\u53d1\u8005\u4eec\uff0c\u66f4\u597d\u4e86\u638c\u63e1\u76f8\u5173\u77e5\u8bc6\u3002","date":"2022-07-06T00:00:00.000Z","formattedDate":"2022\u5e747\u67086\u65e5","tags":[],"readingTime":4.29,"hasTruncateMarker":false,"authors":[{"name":"walon"}],"frontMatter":{"slug":"catelog","authors":{"name":"walon"}},"prevItem":{"title":"\u5173\u4e8ehybridclr\u53ef\u884c\u6027\u7684\u601d\u7ef4\u5b9e\u9a8c","permalink":"/blog/mindexperiment"}},"content":"\u6211\u4eec\u5728\u5b9e\u73b0hybridclr\u8fc7\u7a0b\u4e2d\uff0c\u6df1\u5165\u7814\u7a76\u4e86CLI\u89c4\u8303\u4e0eil2cpp\u5b9e\u73b0\uff0c\u79ef\u7d2f\u4e86\u5927\u91cf\u5b9d\u8d35\u7684\u7ecf\u9a8c\u3002\u8003\u8651\u5230\u56fd\u5185\u6e38\u620f\u884c\u4e1a\u5bf9clr\u53cail2cpp\u76f8\u5173\u7684\u8d44\u6599\u4e0d\u591a\uff0c\u6211\u4eec\u5e0c\u671b\u5c06\u8fd9\u4e9b\u77e5\u8bc6\u7cfb\u7edf\u6027\u5730\u6574\u7406\u51fa\u6765\uff0c\u5e2e\u52a9\u90a3\u4e9b\u6e34\u671b\u6df1\u5165\u7814\u7a76Unity\u4e0bCLR Runtime\u5b9e\u73b0\u7684\u5f00\u53d1\u8005\u4eec\uff0c\u66f4\u597d\u4e86\u638c\u63e1\u76f8\u5173\u77e5\u8bc6\u3002\\n\\n## Inspect il2cpp \u76ee\u5f55\\n\\n- il2cpp \u5e8f\u7ae0\\n  - il2cpp \u4ecb\u7ecd\\n  - il2cpp il2cpp \u67b6\u6784\u53ca\u6e90\u7801\u7ed3\u6784\u4ecb\u7ecd\\n  - il2cpp \u5b89\u88c5\u3001\u7f16\u8bd1\u53ca\u8c03\u8bd5\\n- il2cpp \u8fd0\u884c\u65f6\u5b9e\u73b0\\n  - il2cpp Runtime \u521d\u59cb\u5316\u6d41\u7a0b\u5256\u6790\\n  - il2cpp metadata \uff08\u6b64\u8282\u5185\u5bb9\u6781\u5176\u5e9e\u5927\uff09\\n    - CLI metadata \u7b80\u7565\u4ecb\u7ecd\\n    - il2cpp metadata \u521d\u59cb\u5316\u6d41\u7a0b\u5256\u6790\\n    - persistent metadata \u5373 global-metadata.dat \u4ecb\u7ecd\\n    - runtime metadata \u4ecb\u7ecd\\n  - il2cpp IL to c++ \u4ee3\u7801\u7684\u8f6c\u6362\\n    - \u57fa\u7840\u6307\u4ee4\u96c6\\n    - \u5bf9\u8c61\u6a21\u578b\u76f8\u5173\u6307\u4ee4 \uff08\u5185\u5bb9\u6781\u5176\u5e9e\u5927\uff09\\n    - \u5f02\u5e38\u673a\u5236\\n    - \u6cdb\u578b\u5171\u4eab\u673a\u5236\\n    - PInvoke \u4e0e MonoPInvokeCallbackAttribute\u76f8\u5173\u3002(\u4e00\u4e2a\u6709\u8da3\u7684\u95ee\u9898\uff1ail2cpp\u4e2dlua\u56de\u8c03c#\u51fd\u6570\u76f8\u6bd4\u4e0e\u56de\u8c03\u666e\u901ac\u51fd\u6570\uff0c\u591a\u4e86\u54ea\u4e9b\u5f00\u9500\uff1f)\\n    - icalls\\n    - delegate\\n    - \u53cd\u5c04\u76f8\u5173\u652f\u6301\\n    - \u8de8\u5e73\u53f0\u76f8\u5173\\n  - \u7c7b\u578b\u521d\u59cb\u5316 Class::Init \u6d41\u7a0b\u5256\u6790\\n  - \u6cdb\u578b\u7c7b\u5b9e\u73b0\\n  - \u6cdb\u578b\u51fd\u6570\u5b9e\u73b0\\n  - \u6cdb\u578b\u5171\u4eab\u673a\u5236\\n  - \u5f02\u5e38\u673a\u5236\\n  - \u53cd\u5c04\u76f8\u5173\u5b9e\u73b0\\n  - \u503c\u7c7b\u578b\u76f8\u5173\u673a\u5236\\n  - box\u4e0eunbox\u76f8\u5173\u673a\u5236\\n  - object\u3001string\u3001Array\u3001TypedReference\u7b49\u4e00\u4e9b\u57fa\u7840BCL\u7c7b\u578b\u7684\u63a2\u7a76\\n  - icalls \u5b9e\u73b0\\n  - il2cpp\u53camono\u7684bug\u4ecb\u7ecd\\n  - il2cpp gc\u7ba1\u7406\\n  - il2cpp \u591a\u7ebf\u7a0b\u53ca\u5185\u5b58\u6a21\u578b\u5904\u7406\\n- 2018-2022\u4e2dil2cpp\u5b9e\u73b0\u7684\u6f14\u5316\\n\\n## Inspect hybridclr \u76ee\u5f55\\n\\n- 1 \u5bfc\u8bba\\n  - \u624b\u6e38\u70ed\u66f4\u65b0\u6280\u672f\u7684\u53d1\u5c55\u53f2\\n  - \u5f53\u524d\u4e3b\u6d41\u70ed\u66f4\u65b0\u6280\u672f\u7684\u7f3a\u9677\\n  - \u4e0b\u4e00\u4ee3\u70ed\u66f4\u65b0\u6280\u672f\u63a2\u7d22\u2014\u2014unity\u5f15\u64ce\u4e0b\u7684\u539f\u751fc#\u70ed\u66f4\u65b0\u6280\u672f\\n- 2 hybridclr\u6982\u89c8\\n  - 1 hybridclr\u4ecb\u7ecd\\n  - 2 \u5173\u4e8ehybridclr\u53ef\u884c\u6027\u7684\u601d\u7ef4\u5b9e\u9a8c\\n  - 3 hybridclr\u6280\u672f\u539f\u7406\u5256\u6790\\n- 3 metadata \u52a0\u8f7d\\n  - 1 coff\u6587\u4ef6\u89e3\u6790\\n  - 2 stream \u89e3\u6790\\n  - 3 \u539f\u59cbtables\u89e3\u6790\\n  - 4 \u590d\u6742\u5143\u6570\u636e\u89e3\u6790\\n- 4 metadata \u6ce8\u518c\\n  - 1 assembly \u6ce8\u518c\\n  - 2 TypeDefinition \u6ce8\u518c\uff08\u590d\u6742\uff09\\n  - 3 generic class\\n  - 4 generic method\\n  - 5 \u6865\u63a5\u51fd\u6570\\n- 5 \u5bc4\u5b58\u5668\u6307\u4ee4\u96c6\u8bbe\u8ba1\\n  - IL\u6307\u4ee4\u96c6\u4ecb\u7ecd\\n  - \u57fa\u4e8e\u6808\u7684\u6307\u4ee4\u96c6\u7684\u7f3a\u9677\\n  - \u5bc4\u5b58\u5668\u6307\u4ee4\u96c6\\n    - \u57fa\u7840\u8f6c\u6362\u89c4\u5219\\n    - \u6307\u4ee4\u9759\u6001\u7279\u4f8b\u5316\\n    - resolve data\\n    - \u5176\u4ed6\u7279\u6b8a\u5904\u7406\\n  - \u4e00\u4e9b\u7528\u4e8e\u89e3\u91ca\u5668JIT\u6280\u672f\\n    - InitOnce JIT\u4f18\u5316\u6280\u672f\\n- 6 \u6307\u4ee4\u96c6transform\u5b9e\u73b0\\n  - \u57fa\u7840\u601d\u8def\u4ecb\u7ecd\\n  - transform\u7b97\u6cd5\\n    - basic block\u5212\u5206\\n    - \u57fa\u4e8ebasic block\u7684\u6307\u4ee4\u6d41\u904d\u5386\u53ca\u8f6c\u6362\\n    - \u666e\u901a\u6307\u4ee4\\n    - \u51fd\u6570\u8c03\u7528\u6307\u4ee4\\n    - branch\u76f8\u5173\u6307\u4ee4\\n    - \u5f02\u5e38\u76f8\u5173\u6307\u4ee4\\n  - \u6307\u4ee4\u96c6\u4f18\u5316\\n    - \u6307\u4ee4\u5408\u5e76\\n    - ValueType\u76f8\u5173\u6307\u4ee4\u4f18\u5316\\n    - \u51fd\u6570inline\\n    - instinct\u51fd\u6570\u66ff\u6362\\n  - virtual Execution System\\n    - Thread Interpreter Stack\\n    - Interpreter Frame\u5b9e\u73b0\u4e0e\u4f18\u5316\\n    - localloc \u4e0e Local Memory Pool\\n    - \u6865\u63a5\u51fd\u6570\\n    - \u6307\u4ee4\u5b9e\u73b0\\n    - instinct\u51fd\u6570\\n    - reflection\u76f8\u5173\u5b9e\u73b0\\n    - extern\u51fd\u6570\u5b9e\u73b0\\n  - \u8de8\u5e73\u53f0\u517c\u5bb9\u6027\u5904\u7406\\n    - 32\u4f4d\u4e0e64\u4f4d\\n    - \u5185\u5b58\u5bf9\u9f50\u8bbf\u95ee\\n    - x86\u4e0earm\u7cfb\u5217\u533a\u522b\\n      - float\u4e0eint\u4e4b\u95f4\u8f6c\u6362\\n      - abi\\n    - \u865a\u62df\u5730\u5740\u7a7a\u95f4\u5dee\u5f02\\n    - \u4e00\u4e9b\u884c\u4e3a\u4e0d\u5b9a\u7684\u51fd\u6570\\n      - memcpy\\n  - AOT\u6cdb\u578b \uff08\u57fa\u4e8e\u8865\u5145\u5143\u6570\u636e\u7684\u6cdb\u578b\u5b9e\u4f8b\u5316\u6280\u672f\uff09\\n  - AOT hotfix\u5b9e\u73b0\\n- misc\\n  - \u89e3\u51b3Unity\u8d44\u6e90\u4e0a\u6302\u8f7dinterpreter\u811a\u672c\\n  - gc \u5904\u7406\\n  - \u591a\u7ebf\u7a0b\u76f8\u5173\u5904\u7406\\n- test\u6846\u67b6\\n  - \u6d4b\u8bd5\u7528\u4f8b\u9879\u76ee\\n    - bootstrap cpp\u6d4b\u8bd5\u96c6\\n    - .net c#\u6d4b\u8bd5\u96c6\\n    - \u751f\u6210\u6d4b\u8bd5\u62a5\u544a\\n  - \u6d4b\u8bd5\u5de5\u5177\\n    - \u521b\u5efa\u591a\u7248\u672c\u591a\u5e73\u53f0\u7684\u6d4b\u8bd5\u9879\u76ee\\n    - \u8fd0\u884c\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6536\u96c6\u6d4b\u8bd5\u62a5\u544a\\n    - \u751f\u6210\u6700\u7ec8\u6d4b\u8bd5\u62a5\u544a\\n  - \u81ea\u52a8\u5316\u6d4b\u8bd5DevOps\u6846\u67b6"}]}')}}]);